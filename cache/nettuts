{"query":{"count":"10","created":"2010-10-17T04:52:25Z","lang":"en-US","results":{"item":[{"title":"The Easiest Way to Create Vertical Text with CSS","link":"http://feedproxy.google.com/~r/nettuts/~3/n1PMMOlbaXg/","comments":["http://net.tutsplus.com/tutorials/html-css-techniques/the-easiest-way-to-create-vertical-text-with-css/#comments","38"],"pubDate":"Fri, 15 Oct 2010 16:12:23 +0000","creator":"Jeffrey Way","category":["HTML & CSS","CSS","tips","vertical text","Videos"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15284"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/Mjc07GOYAQxCBOC3LWItXORfk00/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/Mjc07GOYAQxCBOC3LWItXORfk00/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/Mjc07GOYAQxCBOC3LWItXORfk00/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/Mjc07GOYAQxCBOC3LWItXORfk00/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Earlier this morning, I needed to create vertical text for a project I&#8217;m working on. After trying out a couple ideas, I took to <a href=\"http://www.twitter.com/nettuts\">Twitter</a> to find what sorts of thoughts our followers had on the subject. There were plenty of great responses and ideas that we&#8217;ll go over today! </p>\n<p><span id=\"more-15284\"></span></p>\n<div class=\"tutorial_image\">\n<object width=\"600\" height=\"338\"><param name=\"movie\" value=\"http://www.youtube.com/v/DcqmT8D_kzA?fs=1&amp;hl=en_US&amp;hd=1&amp;color1=0x3a3a3a&amp;color2=0x999999\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/DcqmT8D_kzA?fs=1&amp;hl=en_US&amp;hd=1&amp;color1=0x3a3a3a&amp;color2=0x999999\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"338\"></embed></object></p>\n<div><em>*Note &#8211; please refer to &#8220;Method 6&#8243; below for more details about proper usage. </em> </div>\n<p><span><a href=\"http://www.youtube.com/user/nettutsplus\">Subscribe to our YouTube page to watch all of the video tutorials!</a></span><br />\n<span><em>Prefer to watch this video on <a href=\"http://screenr.com/95l\">Screenr</a>?</em></span>\n</div>\n<hr />\n<h2><span>Method 1</span>: <code>&lt;br></code> Tags</h2>\n<p>\nSo, one possible (though not recommended) way to achieve vertical text is to add <code>&lt;br></code> tags after each letter.\n</p>\n<pre  name=\"code\" class=\"html\">\n&lt;h1>\n   N &lt;br />E &lt;br />T &lt;br />T &lt;br />U &lt;br />T &lt;br />S\n&lt;/h1>\n</pre>\n<h5> <a href=\"http://jsbin.com/okuvo3\">View a Demo</a> </h5>\n<p>Don&#8217;t use this method. It&#8217;s lame and sloppy. </p>\n<hr />\n<h2><span>Method 2</span>: Static Wrapping </h2>\n<p>With this method, we wrap each letter in a span, and then set its <code>display</code> to <code>block</code> within our CSS. </p>\n<pre  name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;meta charset=utf-8 />\n&lt;title>Vertical Text&lt;/title>\n\n&lt;style>\n  h1 span { display: block; }\n&lt;/style>\n&lt;/head>\n&lt;body>\n\n  &lt;h1>\n   &lt;span> N &lt;/span>\n   &lt;span> E &lt;/span>\n   &lt;span> T &lt;/span>\n   &lt;span> T &lt;/span>\n   &lt;span> U &lt;/span>\n   &lt;span> T &lt;/span>\n   &lt;span> S &lt;/span>\n  &lt;/h1>\n\n&lt;/body>\n&lt;/html>\n</pre>\n<h5> <a href=\"http://jsbin.com/axiki4\">View Demo </a></h5>\n<p>The problem with this solution &#8212; other than the frightening mark-up &#8212; is that it&#8217;s a manual process. If the text is generated dynamically from a CMS, you&#8217;re out of luck. Don&#8217;t use this method. </p>\n<hr />\n<h2><span>Method 3</span>: Use JavaScript </h2>\n<p>My initial instinct was to dynamically add the <code>span</code> tags with JavaScript. That way, we get around the issues mentioned in method two. </p>\n<pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;meta charset=utf-8 />\n&lt;title>JS Bin&lt;/title>\n\n&lt;style>\n  h1 span { display: block; }\n&lt;/style>\n&lt;/head>\n&lt;body>\n  &lt;h1> NETTUTS &lt;/h1>\n\n  &lt;script>\n    var h1 = document.getElementsByTagName('h1')[0];\n    h1.innerHTML = '&lt;span>' + h1.innerHTML.split('').join('&lt;/span>&lt;span>') + '&lt;/span>';\n  &lt;/script>\n&lt;/body>\n&lt;/html>\n</pre>\n<h5><a href=\"http://jsbin.com/esema3/2\">View Demo</a> </h5>\n<p>This method is definitely an improvement. Above, we <code>split</code> the text into an array, and then wrap each letter in a <code>span</code>. While we could use something like a <code>for</code> statement, or <code>$.map</code> to filter through the array, a far better and quicker solution is to manually join and wrap the text at the same time. </p>\n<p>Though better, this solution isn&#8217;t recommended. </p>\n<ul>\n<li> Will this break your layout if JavaScript is disabled? </li>\n<li> Ideally, we should be using CSS for this task, if possible. </li>\n</ul>\n<hr />\n<h2><span>Method 4</span>: Apply a Width to the Container </h2>\n<p>\nLet&#8217;s get away from JavaScript if we can. What if we applied a width to the container element, and forced the text to wrap? That could work.\n</p>\n<pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;meta charset=utf-8 />\n&lt;title>JS Bin&lt;/title>\n\n&lt;style>\n  h1 {\n    width: 50px;\n    font-size: 50px;\n    word-wrap: break-word;\n  }\n&lt;/style>\n&lt;/head>\n&lt;body>\n  &lt;h1> NETTUTS &lt;/h1>\n&lt;/body>\n&lt;/html>\n</pre>\n<h5> <a href=\"http://jsbin.com/ohigi3\"> View Demo </a> </h5>\n<p> In this scenario, we apply a very narrow width to the <code>h1</code> tag, and then make its <code>font-size</code> equal to that exact value. Finally, by setting <code>word-wrap</code> equal to <code>break-word</code>, we can force each letter onto its own line.  However, <code>word-wrap: break-word</code> is part of the CSS3 specification, and is not compliant across all browsers. </p>\n<p>Excluding older browsers, this seemingly solves our problem&#8230;but not entirely. The demo above does appear to work, but it&#8217;s too risky to play with pixel values. Let&#8217;s try something as simple as <a href=\"http://jsbin.com/ohigi3/2\">turning the uppercase letters into lowercase. </a> </p>\n<div class=\"tutorial_image\">\n<img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/823_verticalText/broken.png\" alt=\"Broken Again\" />\n</div>\n<p>Yikes; with this method, we have to be very careful when it comes to the specific values we set. Not recommended. </p>\n<hr />\n<h2><span>Method 5</span>: Apply <code>letter-spacing</code> </h2>\n<p>As a precaution, and to extend method four, why don&#8217;t we apply fairly large <code>letter-spacing</code> to get around this issue?</p>\n<p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;meta charset=utf-8 />\n&lt;title>JS Bin&lt;/title>\n\n&lt;style>\n  h1 {\n    width: 50px;\n    font-size: 50px;\n    word-wrap: break-word;\n    letter-spacing: 20px; /* Set large letter-spacing as precaution */\n  }\n&lt;/style>\n&lt;/head>\n&lt;body>\n  &lt;h1> Nettuts &lt;/h1>\n&lt;/body>\n&lt;/html>\n</pre>\n<h5> <a href=\"http://jsbin.com/ovuja4\"> View Demo </a> </h5>\n<p>That seems to fix the issue, though, again, we&#8217;re using a bit of CSS3 here. </p>\n<hr />\n<h2> <span>Method 6</span>: Use <code>em</code>s </h2>\n<p>Alternatively, there&#8217;s a one-liner solution. Remember when we learned that applying <code>overflow: hidden</code> to a parent element would miraculously make it contain its floats? This method is sort of like that! The key is to use <code>em</code>s, and place a space between each letter. </p>\n<pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;meta charset=utf-8 />\n&lt;title>JS Bin&lt;/title>\n\n&lt;style>\n  h1 {\n    width: 1em;\n    font-size: 40px;\n    letter-spacing: 40px; /* arbitrarily large letter-spacing for safety */\n  }\n&lt;/style>\n&lt;/head>\n&lt;body>\n  &lt;h1> N e t t u t s &lt;/h1>\n&lt;/body>\n&lt;/html>\n</pre>\n<h5><a href=\"http://jsbin.com/ahomu4\">View Demo</a> </h5>\n<p>Pretty neat, right? And, this way, you can apply any font size that you wish. Because we&#8217;re using <code>em</code>s &#8212; which is equal to the <code>x-height</code> of the chosen font &#8212; we&#8217;re then provided with a lot more flexibility. </p>\n<p><strong>But</strong>, once again, sometimes more than one letter will end up on  a line. You have to be safe; that&#8217;s why I&#8217;ve applied arbitrarily large <code>letter-spacing</code> to ensure that there&#8217;s never more than one letter on a line. </p>\n<p>To my knowledge at this time, this is the best, most cross-browser compliant solution. </p>\n<hr />\n<h2> <span>Method 7</span> : <code>Whitespace</code> </h2>\n<p>One last way to achieve this effect is to take advantage of the <code>white-space</code> property. </p>\n<pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE HTML>\n&lt;html lang=\"en\">\n   &lt;head>\n      &lt;meta charset=\"UTF-8\">\n      &lt;title>&lt;/title>\n      &lt;style>\n         h1 { white-space: pre; }\n      &lt;/style>\n   &lt;/head>\n   &lt;body>\n\n      &lt;h1>\n         J\n         E\n         F\n         F\n         R\n         E\n         Y\n      &lt;/h1>\n   &lt;/body>\n&lt;/html>\n</pre>\n<h5><a href=\"http://jsbin.com/avute3\">View Demo </a> </h5>\n<p>By setting <code>white-space</code> to <code>pre</code>, that instructs the text to behave as if it was within a <code>pre</code> tag. As such, it honors any spacing that you&#8217;ve added. </p>\n<hr />\n<h2> Conclusion </h2>\n<p>Shouldn&#8217;t there be a CSS3 rule to accomplish this task? What if I could set something along the lines of: <code>font-display: letter-block;</code> which would instruct each letter to be rendered as a block of sorts? </p>\n<p>What do you think? Do you have any other alternatives that we should consider? Many people suggested using text-rotation to accomplish the task, but it&#8217;s important to remember that this also rotates the text ninety degrees as well, which is not what we&#8217;re trying to achieve. </p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=n1PMMOlbaXg:tLAlAQDtFuE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=n1PMMOlbaXg:tLAlAQDtFuE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=n1PMMOlbaXg:tLAlAQDtFuE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=n1PMMOlbaXg:tLAlAQDtFuE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=n1PMMOlbaXg:tLAlAQDtFuE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=n1PMMOlbaXg:tLAlAQDtFuE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=n1PMMOlbaXg:tLAlAQDtFuE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=n1PMMOlbaXg:tLAlAQDtFuE:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/n1PMMOlbaXg\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/tutorials/html-css-techniques/the-easiest-way-to-create-vertical-text-with-css/feed/","origLink":"http://net.tutsplus.com/tutorials/html-css-techniques/the-easiest-way-to-create-vertical-text-with-css/"},{"title":"30+ Water-Inspired Websites: BAD 2010","link":"http://feedproxy.google.com/~r/nettuts/~3/uw1zbzOho6U/","comments":["http://net.tutsplus.com/articles/web-roundups/30-water-inspired-websites-bad-2010/#comments","7"],"pubDate":"Fri, 15 Oct 2010 14:30:54 +0000","creator":"Rafael Soto","category":["Web Roundups","bad","round-up","water"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15200"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/INTRDcKSAWqtzlmtZ46YaAXDDuk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/INTRDcKSAWqtzlmtZ46YaAXDDuk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/INTRDcKSAWqtzlmtZ46YaAXDDuk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/INTRDcKSAWqtzlmtZ46YaAXDDuk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>This year, Nettuts+ is taking part in <a href=\"http://blogactionday.change.org/\">Blog Action Day</a> to raise awareness about clean water and water conservation. To tie that in with the web development world, we&#8217;ve compiled 30+ examples of websites, which make use of a water motif.  </p>\n<p><span id=\"more-15200\"></span></p>\n<p><strong>Startling Fact: </strong>Two million children under the age of five die from unsafe drinking water every single year. While many members of the Nettuts+ community (including myself) are in a constant state of saving for Adobe CS<em>X</em>, or any other expensive gadget, it can become alarmingly easy to forget that as many as a billion people on the planet don&#8217;t have access to something as simple as clean drinking water. </p>\n<p>However, these scary statistics are not beyond our control. Did you know that even a $20 donation to sites like &#8220;<a href=\"http://www.charitywater.org/\">Charity: Water</a>&#8221; can provide one person with clean drinking water for twenty years? Money that we so often frivolously waste &#8212; on junk we don&#8217;t need &#8212; could be put to much better use. </p>\n<p>Sometimes, it&#8217;s easy to do nothing &#8212; if only because you feel that you must give a lot in order for it to count. On the contrary, this couldn&#8217;t be further from the truth. If you only donated your lunch money for a day or two&#8230;that would absolutely make a difference. I&#8217;m in; are you? <br /><em>-Jeffrey</em></p>\n<hr />\n<h2 style=\"margin-bottom: 35px;\">30+ Water-Inspired Websites </h2>\n<h2><span>1.</span> <a href=\"http://www.pusulaweb.com/\">Pusula Web</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.pusulaweb.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/pusulaweb.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>2.</span> <a href=\"http://www.surfinparadise.com.au/\">Surf In Paradise</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.surfinparadise.com.au/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/surfinparadise.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>3.</span> <a href=\"http://www.dizzain.com/\">Dizzain</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.dizzain.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/dizzain.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>4.</span> <a href=\"http://www.4internet.cz/\">4 Internet</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.4internet.cz/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/4internet.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>5.</span> <a href=\"http://www.icebrrg.com/\">icebrrg</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.icebrrg.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/icebrrg.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>6.</span> <a href=\"http://www.geticeberg.com/\">iceberg</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.geticeberg.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/geticeberg.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>7.</span> <a href=\"http://dgerelo.net/\">dgerelo.net</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://dgerelo.net/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/dgerelo.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>8.</span> <a href=\"http://www.holidays4scubadiving.co.uk/\">Tropical Sky Scuba Diving</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.holidays4scubadiving.co.uk/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/holidays4scubadiving.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>9.</span> <a href=\"http://alexswanson.net/\">Alex Swanson</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://alexswanson.net/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/alexswanson.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>10.</span> <a href=\"http://feedstitch.com/\">Feed stitch</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://feedstitch.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/feedstitch.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>11.</span> <a href=\"http://flossedtoday.com/\">Flossed Today</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://flossedtoday.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/flossedtoday.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>12.</span> <a href=\"http://www.marketing-informatico.com/\">Marketing Informatico</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.marketing-informatico.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/marketing-informatico.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>13.</span> <a href=\"http://www.squaredeye.com/\">Squared Eye</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.squaredeye.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/squaredeye.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>14.</span> <a href=\"http://www.nirmal.ca/\">Nirmal</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.nirmal.ca/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/nirmal.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>15.</span> <a href=\"http://www.viget.com/inspire\">Viget Inspire</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.viget.com/inspire\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/viget.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>16.</span> <a href=\"http://www.agamicreative.com/\">Agami Creative</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.agamicreative.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/agamicreative.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>17.</span> <a href=\"http://www.happycog.com/\">happy cog</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.happycog.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/happycog.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>18.</span> <a href=\"http://www.mattdempsey.com/\">Matt Dempsey</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.mattdempsey.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/mattdempsey.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>19.</span> <a href=\"http://www.bcandullo.com/\">bcandullo.com</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.bcandullo.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/bcandullo.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>20.</span> <a href=\"http://www.alifelski.com/\">ali felski</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.alifelski.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/alifelski.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>21.</span> <a href=\"http://www.biola.edu/undergrad/\">Biola</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.biola.edu/undergrad/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/biola.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>22.</span> <a href=\"http://www.footballmadeinafrica.com/index.html\">Football made in Africa</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.footballmadeinafrica.com/index.html\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/footballmadeinafrica.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>23.</span> <a href=\"http://www.vsplash.com/\">vSplash</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.vsplash.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/vsplash.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>24.</span> <a href=\"http://sunrisedesign.com/\">Sunrise Design</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://sunrisedesign.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/sunrisedesign.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>25.</span> <a href=\"http://www.toggle.uk.com/\">Toggle</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.toggle.uk.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/toggle.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>26.</span> <a href=\"http://www.lebloe.com/\">Le Bloe</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.lebloe.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/lebloe.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>27.</span> <a href=\"http://www.circa.com.au/\">Circa</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.circa.com.au/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/circa.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>28.</span> <a href=\"http://www.sietedefebrero.com/\">Siete de Febrero</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.sietedefebrero.com/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/sietedefebrero.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>29.</span> <a href=\"http://www.jumpstartforbusiness.co.uk/\">jumpstart</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://www.jumpstartforbusiness.co.uk/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/jumpstartforbusiness.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>30.</span> <a href=\"http://boompa.ca/\">Boompa</a></h2>\n<div class=\"tutorial_image\"><a href=\"http://boompa.ca/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/boompa.png\" width=\"600\" height=\"269\" alt=\"Name of site\" /></a></div>\n<hr />\n<h2><span>31. </span> <a href=\"http://www.charitywater.org/\">Charity Water</a></h2>\n<div class=\"tutorial_image\">\n    <a href=\"http://www.charitywater.org/\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/821_bad/charity-water.jpg\" alt=\"Charity Water\" /></a>\n</div>\n<hr />\n<h2> About Blog Action Day </h2>\n<p><em>&#8220;Blog Action Day (originally created by Envato) is an annual event held every October 15 that unites the world’s bloggers in posting about the same issue on the same day with the aim of sparking a global discussion and driving collective action.&#8221; </em></p>\n<hr />\n<h2>\nWhy Water?<br />\n</h2>\n<p>\n&#8220;Right now, almost a billion people on the planet don’t have access to clean, safe drinking water. That’s one in eight of us who are subject to preventable disease and even death because of something that many of us take for granted.\n</p>\n<p>\nAccess to clean water is not just a human rights issue. It’s an environmental issue. An animal welfare issue. A sustainability issue. Water is a global issue, and it affects all of us.&#8221;</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uw1zbzOho6U:vSbrCwvwnJo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uw1zbzOho6U:vSbrCwvwnJo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uw1zbzOho6U:vSbrCwvwnJo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uw1zbzOho6U:vSbrCwvwnJo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uw1zbzOho6U:vSbrCwvwnJo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uw1zbzOho6U:vSbrCwvwnJo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uw1zbzOho6U:vSbrCwvwnJo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uw1zbzOho6U:vSbrCwvwnJo:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/uw1zbzOho6U\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/articles/web-roundups/30-water-inspired-websites-bad-2010/feed/","origLink":"http://net.tutsplus.com/articles/web-roundups/30-water-inspired-websites-bad-2010/"},{"title":"A Visual Introduction to Git: Premium Screencast","link":"http://feedproxy.google.com/~r/nettuts/~3/V684BBvxw70/","comments":["http://net.tutsplus.com/tutorials/other/a-visual-introduction-to-git-premium-screencast/#comments","4"],"pubDate":"Thu, 14 Oct 2010 19:13:27 +0000","creator":"Andrew Burgess","category":["Other","git","github","Premium","Videos"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15276"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/3K3Jc-99_MvBAWXbPtq07KXvQXA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3K3Jc-99_MvBAWXbPtq07KXvQXA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/3K3Jc-99_MvBAWXbPtq07KXvQXA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3K3Jc-99_MvBAWXbPtq07KXvQXA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>\nMany of you might be aware that Nettuts+ recently launched the book, &#8220;<a href=\"http://net.tutsplus.com/freebies/books/getting-good-with-git-free-ebook/\">Getting Good with Git.</a>&#8221; However, sometimes, when it comes to scary code and the command line, a visual guide proves to be more helpful for some (including me). If you fall into this camp, we&#8217;ve asked the author, Andrew Burgess, to also prepare a screencast, exclusively for our Premium members on the subject! <a href=\"http://net.tutsplus.com/about/join-plus/\">Gain access to this screencast series, as well as many others by becoming a Premium member.</a></p>\n<p>And, everyone: don&#8217;t forget to download <a href=\"http://net.tutsplus.com/freebies/books/getting-good-with-git-free-ebook/\">&#8220;Getting Good with Git&#8221;</a> for free&#8230;but only for the rest of October! </p>\n<p><span id=\"more-15276\"></span></p>\n<div class=\"tutorial_image\">\n<img src=\"http://s3.envato.com/files/1198138/590_goodgit.png\" alt=\"A Visual Introduction to Git\" />\n</div>\n<hr />\n<h2>Join Net Premium</h2>\n<div class=\"tutorial_image\"><img src=\"http://miscfiles.s3.amazonaws.com/banners/nettuts_468x60.jpg\" border=0 alt=\"NETTUTS+ Screencasts and Bonus Tutorials\" width=468 height=60></div>\n<p>\nFor those unfamiliar, the family of <a href=\"http://tutsplus.com\">Tuts+</a> sites runs a premium membership service. For $9 per month, you gain access to exclusive premium tutorials, screencasts, and freebies from <a href=\"http://net.tutsplus.com\">Nettuts+</a>, <a href=\"http://psd.tutsplus.com\">Psdtuts+</a>, <a href=\"http://ae.tutsplus.com\">Aetuts+</a>, <a href=\"http://audio.tutsplus.com\">Audiotuts+</a>, <a href=\"http://vector.tutsplus.com\">Vectortuts+</a>, and <a href=\"http://cg.tutsplus.com\">CgTuts+</a> For the price of a pizza, you&#8217;ll learn from some of the best minds in the business. <a href=\"http://net.tutsplus.com/about/join-plus/\">Become a Premium member</a> to read this tutorial, as well as hundreds of other advanced tutorials and screencasts.</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=V684BBvxw70:S1SNpVdZJXY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=V684BBvxw70:S1SNpVdZJXY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=V684BBvxw70:S1SNpVdZJXY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=V684BBvxw70:S1SNpVdZJXY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=V684BBvxw70:S1SNpVdZJXY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=V684BBvxw70:S1SNpVdZJXY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=V684BBvxw70:S1SNpVdZJXY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=V684BBvxw70:S1SNpVdZJXY:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/V684BBvxw70\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/tutorials/other/a-visual-introduction-to-git-premium-screencast/feed/","origLink":"http://net.tutsplus.com/tutorials/other/a-visual-introduction-to-git-premium-screencast/"},{"title":"Venturing into Vim – Week 4: Premium Video","link":"http://feedproxy.google.com/~r/nettuts/~3/uu-VqmXFeW4/","comments":["http://net.tutsplus.com/articles/news/venturing-into-vim-week-4-premium-video/#comments","3"],"pubDate":"Thu, 14 Oct 2010 18:53:33 +0000","creator":"Jeffrey Way","category":["News","code editor","emacs","Premium","text editor","venturing into vim","vi","Videos","vim"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15266"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/AKbSvIqycFnmuD52M1b5REtvd_o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/AKbSvIqycFnmuD52M1b5REtvd_o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/AKbSvIqycFnmuD52M1b5REtvd_o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/AKbSvIqycFnmuD52M1b5REtvd_o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>\nSome say it&#8217;s a decade-old piece of junk; others widely consider it to be the best code editor available. I&#8217;m on a quest to find out for myself.  So, for four weeks (and four screencasts to track my progress), I will use nothing but <a href=\"http://www.vim.org/\">Vim</a>.\n</p>\n<p>Along the way, if you choose to join me, I&#8217;ll share what I&#8217;ve learned, what frustrated me, and everything that falls in between. If you&#8217;ve been hoping to venture into <a href=\"http://www.vim.org/\">Vim</a> territory, there&#8217;s no better time to do so! Let&#8217;s do it together. <a href=\"http://net.tutsplus.com/about/join-plus/\">Gain access to this screencast series, as well as many others by becoming a Premium member.</a></p>\n<p><span id=\"more-15266\"></span></p>\n<hr />\n<h2>Week 4 </h2>\n<p>In this final episode about Vim, we learn about: </p>\n<ul>\n<li> A plethora of new key commands </li>\n<li>How to record macros to save time </li>\n<li>The process of creating book<strong>marks</strong> to always remember where you last were in your project </li>\n<li> How to move lines of code to new locations as quickly as possible </li>\n<li> Decoding the completed vimrc file. (Help make it better by <a href=\"http://github.com/JeffreyWay/Vim\">forking it on Github!</a>) </li>\n<li> All of the different mapping commands, and the differences between each </li>\n<li>IDE-like auto-completion </li>\n</ul><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uu-VqmXFeW4:QXqAT2StPMo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uu-VqmXFeW4:QXqAT2StPMo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uu-VqmXFeW4:QXqAT2StPMo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uu-VqmXFeW4:QXqAT2StPMo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uu-VqmXFeW4:QXqAT2StPMo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uu-VqmXFeW4:QXqAT2StPMo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=uu-VqmXFeW4:QXqAT2StPMo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=uu-VqmXFeW4:QXqAT2StPMo:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/uu-VqmXFeW4\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/articles/news/venturing-into-vim-week-4-premium-video/feed/","origLink":"http://net.tutsplus.com/articles/news/venturing-into-vim-week-4-premium-video/"},{"title":"Quick Tip: How I Personally Create Screencasts with Camtasia","link":"http://feedproxy.google.com/~r/nettuts/~3/-b7MbhF9EdQ/","comments":["http://net.tutsplus.com/tutorials/other/quick-tip-how-i-personally-create-screencasts-with-camtasia/#comments","18"],"pubDate":"Thu, 14 Oct 2010 16:19:54 +0000","creator":"Jeffrey Way","category":["Other","camtasia","camtasia studio","screencasting","techsmith","tips","video tutorials","Videos"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15256"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/Ig_2p3326bIPJRyjb5An-z3Jw4g/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/Ig_2p3326bIPJRyjb5An-z3Jw4g/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/Ig_2p3326bIPJRyjb5An-z3Jw4g/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/Ig_2p3326bIPJRyjb5An-z3Jw4g/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Despite my meager screencasting skills, you wouldn&#8217;t believe how frequently I&#8217;m emailed about the process of creating web development video tutorials. Often times, when it comes to submitting videos to Nettuts+, many feel that the process is simply too difficult and/or time consuming. That&#8217;s honestly just not the case. In today&#8217;s video quick tip, as we branch out a bit from what we usually cover, I&#8217;ll demonstrate exactly how I prepare each screencast with <a href=\"http://www.techsmith.com/camtasia/\">Camtasia</a>. </p>\n<p><span id=\"more-15256\"></span></p>\n<div class=\"tutorial_image\">\n    <object width=\"600\" height=\"338\"><param name=\"movie\" value=\"http://www.youtube.com/v/Dnz60f57mws?fs=1&amp;hl=en_US&amp;hd=1&amp;color1=0x3a3a3a&amp;color2=0x999999\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/Dnz60f57mws?fs=1&amp;hl=en_US&amp;hd=1&amp;color1=0x3a3a3a&amp;color2=0x999999\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"338\"></embed></object><br />\n<span><a href=\"http://www.youtube.com/user/nettutsplus\">Subscribe to our YouTube page to watch all of the video tutorials!</a></span>\n</div>\n<hr />\n<h2>Conclusion </h2>\n<p>Hopefully, the video above will help to persuade you to create tech screencasts for your own website&#8230;or even ours! As long as you have the heart of a teacher, and can memorize a few keyboard shortcuts, you might even find that it&#8217;s fun! At least, this was the case for me; but I&#8217;m a nerd. </p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=-b7MbhF9EdQ:s2V2nqxJams:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=-b7MbhF9EdQ:s2V2nqxJams:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=-b7MbhF9EdQ:s2V2nqxJams:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=-b7MbhF9EdQ:s2V2nqxJams:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=-b7MbhF9EdQ:s2V2nqxJams:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=-b7MbhF9EdQ:s2V2nqxJams:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=-b7MbhF9EdQ:s2V2nqxJams:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=-b7MbhF9EdQ:s2V2nqxJams:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/-b7MbhF9EdQ\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/tutorials/other/quick-tip-how-i-personally-create-screencasts-with-camtasia/feed/","origLink":"http://net.tutsplus.com/tutorials/other/quick-tip-how-i-personally-create-screencasts-with-camtasia/"},{"title":"How to Build a Kick-Butt CSS3 Mega Drop-Down Menu","link":"http://feedproxy.google.com/~r/nettuts/~3/A7nvWfVpQdU/","comments":["http://net.tutsplus.com/tutorials/html-css-techniques/how-to-build-a-kick-butt-css3-mega-drop-down-menu/#comments","82"],"pubDate":"Wed, 13 Oct 2010 13:59:27 +0000","creator":"Guillaume Marty","category":["HTML & CSS","CSS","css3","Mega Menus","Menus"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15129"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/V_mB1bL05YV3ZJkjJrjaWBmxKMM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/V_mB1bL05YV3ZJkjJrjaWBmxKMM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/V_mB1bL05YV3ZJkjJrjaWBmxKMM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/V_mB1bL05YV3ZJkjJrjaWBmxKMM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Often used on e-commerce or large scale websites, mega menus are becoming more and more popular, as they offer an effective solution to displaying a lot of content while keeping a clean layout. In this tutorial, we&#8217;ll learn how to build a cross-browser, awesome CSS-only drop-down mega menu, using nice CSS3 features.</p>\n<p><span id=\"more-15129\"></span></p>\n<hr />\n<h2> <span>Step 1: </span>Building the Navigation Bar</h2>\n<p>Let&#8217;s begin with a basic menu, built with an unordered list and some basic CSS styling.</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<h3>Creating the Menu Container</h3>\n<p>We&#8217;ll now apply some basic CSS styling. For the menu container, we define a fixed width that we center by setting the left and right margins to &#8220;auto&#8221;.</p>\n<pre class=\"css\" name=\"code\">\n#menu {\n\tlist-style:none;\n\twidth:940px;\n\tmargin:30px auto 0px auto;\n\theight:43px;\n\tpadding:0px 20px 0px 20px;\n}\n</pre>\n<p>Now, let&#8217;s see how we can improve it with some CSS3 features. We need to use different syntaxes for Webkit-based browsers (like Safari) and for Mozilla-based browsers (like Firefox).</p>\n<p>For rounded corners, the syntax will be :</p>\n<pre class=\"css\" name=\"code\">\n-moz-border-radius: 10px\n-webkit-border-radius: 10px;\nborder-radius: 10px;\n</pre>\n<p>For the background, we&#8217;ll use gradients and a fallback color for older browsers. To keep consistency when choosing colors, there is an awesome tool called <a href=\"http://0to255.com/facade\">Facade</a> that helps you find lighter and darker tones of a basic color.</p>\n<pre class=\"css\" name=\"code\">\nbackground: #014464;\nbackground: -moz-linear-gradient(top, #0272a7, #013953);\nbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#0272a7), to(#013953));\n</pre>\n<p>The first line applies a simple background color (for older browsers); the second and third lines create a gradient from the top to the bottom using two colors : #0272a7 and #013953.</p>\n<p>We can now add a darker border and polish the design with a &#8220;fake&#8221; inset border created with the &#8220;box-shadow&#8221; feature. The syntax is the same for all compatible browsers: the first value is the horizontal offset, the second one is the vertical offset, the third one is the blur radius (a small value makes it sharper; it will be 1 pixel in our example). We set all offsets to 0 so the blur value will create a uniform light border :</p>\n<pre class=\"css\" name=\"code\">\n-moz-box-shadow:inset 0px 0px 1px #edf9ff;\n-webkit-box-shadow:inset 0px 0px 1px #edf9ff;\nbox-shadow:inset 0px 0px 1px #edf9ff;\n</pre>\n<p>Here&#8217;s the final CSS code for the #menu container :</p>\n<pre class=\"css\" name=\"code\">\n#menu {\n\tlist-style:none;\n\twidth:940px;\n\tmargin:30px auto 0px auto;\n\theight:43px;\n\tpadding:0px 20px 0px 20px;\n\n\t/* Rounded Corners */\n\n\t-moz-border-radius: 10px;\n\t-webkit-border-radius: 10px;\n\tborder-radius: 10px;\n\n\t/* Background color and gradients */\n\n\tbackground: #014464;\n\tbackground: -moz-linear-gradient(top, #0272a7, #013953);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#0272a7), to(#013953));\n\n\t/* Borders */\n\n\tborder: 1px solid #002232;\n\n\t-moz-box-shadow:inset 0px 0px 1px #edf9ff;\n\t-webkit-box-shadow:inset 0px 0px 1px #edf9ff;\n\tbox-shadow:inset 0px 0px 1px #edf9ff;\n}\n</pre>\n<h3>Styling Menu Items</h3>\n<p>We will begin with all menu items aligned to the left and space them with a margin-right (the padding will be necessary for the hover state) :</p>\n<pre class=\"css\" name=\"code\">\n#menu li {\n\tfloat:left;\n\tdisplay:block;\n\ttext-align:center;\n\tposition:relative;\n\tpadding: 4px 10px 4px 10px;\n\tmargin-right:30px;\n\tmargin-top:7px;\n\tborder:none;\n}\n</pre>\n<p>For the hover state and the drop down, I have chosen a grey color scheme for the background.</p>\n<p>The fallback color will be a light grey (#F4F4F4) and the gradient will be applied from the top (#F4F4F4) to the bottom (#EEEEEE). Rounded corners will be applied only on top corners as we&#8217;ll have the drop down sticking right under the menu items.</p>\n<pre class=\"css\" name=\"code\">\nbackground: #F4F4F4;\nbackground: -moz-linear-gradient(top, #F4F4F4, #EEEEEE);\nbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#F4F4F4), to(#EEEEEE));\n</pre>\n<p>The left and right padding is slightly smaller here because we have a border of 1 pixel appearing on hover. If we keep the same padding, menu items will be pushed two pixels on the right because of the left and right borders added on mouse hover. To avoid that, we&#8217;ll remove 1 pixel of padding on both sides, so we have 9 pixels instead of 10.</p>\n<pre class=\"css\" name=\"code\">\nborder: 1px solid #777777;\npadding: 4px 9px 4px 9px;\n</pre>\n<p>Then, we add rounded corners to the top only so the drop down will stick perfectly under the parent menu item :</p>\n<pre class=\"css\" name=\"code\">\n-moz-border-radius: 5px 5px 0px 0px;\n-webkit-border-radius: 5px 5px 0px 0px;\nborder-radius: 5px 5px 0px 0px;\n</pre>\n<p>Here is the final CSS for the menu items on hover :</p>\n<pre class=\"css\" name=\"code\">\n#menu li:hover {\n\tborder: 1px solid #777777;\n\tpadding: 4px 9px 4px 9px;\n\n\t/* Background color and gradients */\n\n\tbackground: #F4F4F4;\n\tbackground: -moz-linear-gradient(top, #F4F4F4, #EEEEEE);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#F4F4F4), to(#EEEEEE));\n\n\t/* Rounded corners */\n\n\t-moz-border-radius: 5px 5px 0px 0px;\n\t-webkit-border-radius: 5px 5px 0px 0px;\n\tborder-radius: 5px 5px 0px 0px;\n}\n</pre>\n<p>For the links, we&#8217;ll apply a nice text shadow using a simple syntax : the first and second values are horizontal and vertical offsets for the shadow (1 pixel in our example), the third one is the blur (1 pixel too) and then we have the (black) color :</p>\n<pre class=\"css\" name=\"code\">\ntext-shadow: 1px 1px 1px #000;\n</pre>\n<p>Here is the final CSS for the links :</p>\n<pre class=\"css\" name=\"code\">\n#menu li a {\n\tfont-family:Arial, Helvetica, sans-serif;\n\tfont-size:14px;\n\tcolor: #EEEEEE;\n\tdisplay:block;\n\toutline:0;\n\ttext-decoration:none;\n\ttext-shadow: 1px 1px 1px #000;\n}\n</pre>\n<p>On mouse hover, as the background is grey, we&#8217;ll use a darker color (#161616) for the links and the white color for the text shadow :</p>\n<pre class=\"css\" name=\"code\">\n#menu li:hover a {\n\tcolor:#161616;\n\ttext-shadow: 1px 1px 1px #FFFFFF;\n}\n</pre>\n<p>Finally, we need a way to indicate if there&#8217;s a drop down or not by using a simple arrow image as background, it will be positioned on the right using padding and the top margin will align to it properly. On hover this top margin will be set to 7 pixels instead of 8 as we have an additional border appearing on mouse hover (otherwise, the arrow would be pushed 1 pixel down on hover) :</p>\n<pre class=\"css\" name=\"code\">\n#menu li .drop {\n\tpadding-right:21px;\n\tbackground:url(\"img/drop.png\") no-repeat right 8px;\n}\n#menu li:hover .drop {\n\tbackground:url(\"img/drop.png\") no-repeat right 7px;\n}\n</pre>\n<p>Here is our final code for the menu container and links; only the &#8220;home&#8221; item doesn&#8217;t have any drop down content for now :</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;About&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<pre class=\"css\" name=\"code\">\n#menu {\n\tlist-style:none;\n\twidth:940px;\n\tmargin:30px auto 0px auto;\n\theight:43px;\n\tpadding:0px 20px 0px 20px;\n\n\t/* Rounded Corners */\n\n\t-moz-border-radius: 10px;\n\t-webkit-border-radius: 10px;\n\tborder-radius: 10px;\n\n\t/* Background color and gradients */\n\n\tbackground: #014464;\n\tbackground: -moz-linear-gradient(top, #0272a7, #013953);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#0272a7), to(#013953));\n\n\t/* Borders */\n\n\tborder: 1px solid #002232;\n\n\t-moz-box-shadow:inset 0px 0px 1px #edf9ff;\n\t-webkit-box-shadow:inset 0px 0px 1px #edf9ff;\n\tbox-shadow:inset 0px 0px 1px #edf9ff;\n}\n\n#menu li {\n\tfloat:left;\n\tdisplay:block;\n\ttext-align:center;\n\tposition:relative;\n\tpadding: 4px 10px 4px 10px;\n\tmargin-right:30px;\n\tmargin-top:7px;\n\tborder:none;\n}\n\n#menu li:hover {\n\tborder: 1px solid #777777;\n\tpadding: 4px 9px 4px 9px;\n\n\t/* Background color and gradients */\n\n\tbackground: #F4F4F4;\n\tbackground: -moz-linear-gradient(top, #F4F4F4, #EEEEEE);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#F4F4F4), to(#EEEEEE));\n\n\t/* Rounded corners */\n\n\t-moz-border-radius: 5px 5px 0px 0px;\n\t-webkit-border-radius: 5px 5px 0px 0px;\n\tborder-radius: 5px 5px 0px 0px;\n}\n\n#menu li a {\n\tfont-family:Arial, Helvetica, sans-serif;\n\tfont-size:14px;\n\tcolor: #EEEEEE;\n\tdisplay:block;\n\toutline:0;\n\ttext-decoration:none;\n\ttext-shadow: 1px 1px 1px #000;\n}\n\n#menu li:hover a {\n\tcolor:#161616;\n\ttext-shadow: 1px 1px 1px #FFFFFF;\n}\n#menu li .drop {\n\tpadding-right:21px;\n\tbackground:url(\"img/drop.png\") no-repeat right 8px;\n}\n#menu li:hover .drop {\n\tbackground:url(\"img/drop.png\") no-repeat right 7px;\n}\n</pre>\n<p>And the result is :</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu03.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"600\" height=\"99\"/></div>\n<hr />\n<h2> <span>Step 2: </span>Coding the Drop Down</h2>\n<p>A &#8220;classic&#8221; drop down menu usually contains lists nested within parent list items and looks like:</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;&lt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"#\"&gt;Subitem 1&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"#\"&gt;Subitem 2&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"#\"&gt;Subitem 3&lt;/a&gt;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;&lt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"#\"&gt;Subitem 1&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"#\"&gt;Subitem 2&lt;/a&gt;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<h3>General Structure</h3>\n<p>For our Mega Menu, instead of nested lists, we&#8217;ll simply use standard DIVs, which will work like any nested list :</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;\n\t\t&lt;div&gt;\n\t\tDrop down Content\n\t\t&lt;div&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;\n\t\t&lt;div&gt;\n\t\tDrop down Content\n\t\t&lt;div&gt;\n\t&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>This will be the basic structure for the drop down. The idea behind it is to be able to include any kind of content, such as paragraphs, images, custom lists or a contact form, organized into columns.</p>\n<h3>Drop Down Containers</h3>\n<p>Containers with different sizes will hold the entire drop down content. I&#8217;ve chosen the tag names according to the number of columns they will contain.</p>\n<p>To hide the drop downs, we&#8217;ll use absolute positioning with a negative left margin :</p>\n<pre class=\"css\" name=\"code\">\nposition:absolute;\nleft:-999em;\n</pre>\n<p>The background fallback color is the same as the one used for the menu items. Modern browsers will display a gradient starting with #EEEEEE at the top (to match the parent menu item gradient) and ending with #BBBBBB at the bottom:</p>\n<pre class=\"css\" name=\"code\">\nbackground:#F4F4F4;\nbackground: -moz-linear-gradient(top, #EEEEEE, #BBBBBB);\nbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#EEEEEE), to(#BBBBBB));\n</pre>\n<p>We&#8217;ll again use rounded corners, except for the top left one :</p>\n<pre class=\"css\" name=\"code\">\n-moz-border-radius: 0px 5px 5px 5px;\n-webkit-border-radius: 0px 5px 5px 5px;\nborder-radius: 0px 5px 5px 5px;\n</pre>\n<pre class=\"css\" name=\"code\">\n.dropdown_1column,\n.dropdown_2columns,\n.dropdown_3columns,\n.dropdown_4columns,\n.dropdown_5columns {\n\tmargin:4px auto;\n\tposition:absolute;\n\tleft:-999em; /* Hides the drop down */\n\ttext-align:left;\n\tpadding:10px 5px 10px 5px;\n\tborder:1px solid #777777;\n\tborder-top:none;\n\n\t/* Gradient background */\n\tbackground:#F4F4F4;\n\tbackground: -moz-linear-gradient(top, #EEEEEE, #BBBBBB);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#EEEEEE), to(#BBBBBB));\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 0px 5px 5px 5px;\n\t-webkit-border-radius: 0px 5px 5px 5px;\n\tborder-radius: 0px 5px 5px 5px;\n}\n</pre>\n<p>To illustrate this, let&#8217;s see how it would look if we hadn&#8217;t paid attention to detail:</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu01.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"400\" height=\"255\"/></div>\n<p>Now here is our example:</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu02.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"400\" height=\"255\"/></div>\n<p>As you can see, the drop down sticks nicely to its parent menu item.</p>\n<p>In order to have a perfect drop down container, we need to specify the width for each one :</p>\n<pre class=\"css\" name=\"code\">\n.dropdown_1column {width: 140px;}\n.dropdown_2columns {width: 280px;}\n.dropdown_3columns {width: 420px;}\n.dropdown_4columns {width: 560px;}\n.dropdown_5columns {width: 700px;}\n</pre>\n<p>And to show the drop downs on mouse hover, we&#8217;ll simply use :</p>\n<pre class=\"css\" name=\"code\">\n#menu li:hover .dropdown_1column,\n#menu li:hover .dropdown_2columns,\n#menu li:hover .dropdown_3columns,\n#menu li:hover .dropdown_4columns,\n#menu li:hover .dropdown_5columns {\n\tleft:-1px;top:auto;\n}\n</pre>\n<h3>Using the Drop Down Containers</h3>\n<p>Our classes are ready to be included in our menu. We&#8217;ll use each one of them starting from the 5-column, layout to the single column drop down :</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n\t&lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;5 Columns&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_5columns\"&gt;\n\t\t&lt;p&gt;5 Columns content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;4 Columns&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_4columns\"&gt;\n\t\t&lt;p&gt;4 Columns content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;3 Columns&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_3columns\"&gt;\n\t\t&lt;p&gt;3 Columns content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;2 Columns&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_2columns\"&gt;\n\t\t&lt;p&gt;2 Columns content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;1 Column&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_1column\"&gt;\n\t\t&lt;p&gt;1 Column content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Here is a preview of the code above :</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu04.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"542\" height=\"160\"/></div>\n<hr />\n<h2> <span>Step 3: </span> Creating the Drop Down Container Columns</h2>\n<p>Now that we have the containers ready, we&#8217;ll create columns of increasing sizes, following the principles of the 960 grid system.</p>\n<pre class=\"css\" name=\"code\">\n.col_1,\n.col_2,\n.col_3,\n.col_4,\n.col_5 {\n\tdisplay:inline;\n\tfloat: left;\n\tposition: relative;\n\tmargin-left: 5px;\n\tmargin-right: 5px;\n}\n.col_1 {width:130px;}\n.col_2 {width:270px;}\n.col_3 {width:410px;}\n.col_4 {width:550px;}\n.col_5 {width:690px;}\n</pre>\n<h3>Using Columns</h3>\n<p>Here is an example of a drop down containing several columns. In this example, we have different combinations using all kinds of columns :</p>\n<pre class=\"html\" name=\"code\">\n&lt;ul id=\"menu\"&gt;\n\t&lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;5 Columns&lt;/a&gt;\n\t\t&lt;div class=\"dropdown_5columns\"&gt;\n\t\t\t&lt;div class=\"col_5\"&gt;\n\t\t\t&lt;p&gt;This is a 5 Columns content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_4\"&gt;\n\t\t\t&lt;p&gt;This is a 4 Columns content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_1\"&gt;\n\t\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_3\"&gt;\n\t\t\t&lt;p&gt;This is a 3 Columns content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div class=\"col_2\"&gt;\n\t\t\t&lt;p&gt;This is a 2 Columns content&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Code preview :</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu05.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"600\" height=\"355\"/></div>\n<hr />\n<h2> <span>Step 4: </span> Aligning to the Right</h2>\n<p>Now, let&#8217;s see how we can align our menu and the drop down content to the right edge of the navigation bar; not only the menu item, but the drop down container should also be changed.</p>\n<p>To accomplish this, we&#8217;ll add a new class called <code>.menu_right</code> to the parent list item, so we reset the right margin and float it to the right :</p>\n<pre class=\"css\" name=\"code\">\n#menu .menu_right {\n\tfloat:right;\n\tmargin-right:0px;\n}\n</pre>\n<p>Next, let&#8217;s see the drop down. In the previous CSS code, rounded corners were applied to all corners except the left-top one to, in order to match the background of the parent menu item. Now we want this drop down to stick to the right edge of the parent menu item. So, we&#8217;ll overwrite the border-radius values with a new class called .align_right, and set the top-right corner to 0.</p>\n<pre class=\"css\" name=\"code\">\n#menu li .align_right {\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px 0px 5px 5px;\n\t-webkit-border-radius: 5px 0px 5px 5px;\n\tborder-radius: 5px 0px 5px 5px;\n}\n</pre>\n<p>Last but not least, we want to make the drop down appear on the right; so we&#8217;ll use our new class and reset the left value, then make it stick to the right :</p>\n<pre class=\"css\" name=\"code\">\n#menu li:hover .align_right {\n\tleft:auto;\n\tright:-1px;\n\ttop:auto;\n}\n</pre>\n<p>Now it&#8217;s ready to be used in the menu :</p>\n<pre class=\"html\" name=\"code\">\n&lt;li class=\"menu_right\"&gt;&lt;a href=\"#\" class=\"drop\"&gt;Right&lt;/a&gt;\n\t&lt;div class=\"dropdown_1column align_right\"&gt;\n\t\t&lt;div class=\"col_1\"&gt;\n\t\t&lt;p&gt;This is a 1 Column content&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/li&gt;\n</pre>\n<p>And a small preview of the code above :</p>\n<div class=\"tutorial_image\"><img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/819_megamenu/menu06.gif\" alt=\"Building a CSS3 Mega Drop Down Menu\" width=\"247\" height=\"180\"/></div>\n<hr />\n<h2> <span>Step 5: </span> Adding and Styling Content</h2>\n<p>Now that we have the whole structure ready, we can add as much content as we want: text, lists, images, etc.</p>\n<h3>General Stylings</h3>\n<p>Let&#8217;s begin with some basic styling for paragraphs and headings :</p>\n<pre class=\"css\" name=\"code\">\n#menu p, #menu h2, #menu h3, #menu ul li {\n\tfont-family:Arial, Helvetica, sans-serif;\n\tline-height:21px;\n\tfont-size:12px;\n\ttext-align:left;\n\ttext-shadow: 1px 1px 1px #FFFFFF;\n}\n#menu h2 {\n\tfont-size:21px;\n\tfont-weight:400;\n\tletter-spacing:-1px;\n\tmargin:7px 0 14px 0;\n\tpadding-bottom:14px;\n\tborder-bottom:1px solid #666666;\n}\n#menu h3 {\n\tfont-size:14px;\n\tmargin:7px 0 14px 0;\n\tpadding-bottom:7px;\n\tborder-bottom:1px solid #888888;\n}\n#menu p {\n\tline-height:18px;\n\tmargin:0 0 10px 0;\n}\n.strong {\n\tfont-weight:bold;\n}\n.italic {\n\tfont-style:italic;\n}\n</pre>\n<p>We can apply a nice blue color to the links within the drop down :</p>\n<pre class=\"css\" name=\"code\">\n#menu li:hover div a {\n\tfont-size:12px;\n\tcolor:#015b86;\n}\n#menu li:hover div a:hover {\n\tcolor:#029feb;\n}\n</pre>\n<h3>Lists Stylings</h3>\n<p>Let&#8217;s revamp our lists; we have to reset some styling such as the background color or the borders which are used in the navigation bar :</p>\n<pre class=\"css\" name=\"code\">\n#menu li ul {\n\tlist-style:none;\n\tpadding:0;\n\tmargin:0 0 12px 0;\n}\n#menu li ul li {\n\tfont-size:12px;\n\tline-height:24px;\n\tposition:relative;\n\ttext-shadow: 1px 1px 1px #ffffff;\n\tpadding:0;\n\tmargin:0;\n\tfloat:none;\n\ttext-align:left;\n\twidth:130px;\n}\n#menu li ul li:hover {\n\tbackground:none;\n\tborder:none;\n\tpadding:0;\n\tmargin:0;\n}\n</pre>\n<h3>Styling Images</h3>\n<pre class=\"css\" name=\"code\">\n.imgshadow {\n\tbackground:#FFFFFF;\n\tpadding:4px;\n\tborder:1px solid #777777;\n\tmargin-top:5px;\n\t-moz-box-shadow:0px 0px 5px #666666;\n\t-webkit-box-shadow:0px 0px 5px #666666;\n\tbox-shadow:0px 0px 5px #666666;\n}\n</pre>\n<p>And to create a paragraph with an image on the left :</p>\n<pre class=\"css\" name=\"code\">\n.img_left {\n\twidth:auto;\n\tfloat:left;\n\tmargin:5px 15px 5px 5px;\n}\n</pre>\n<h3>Text Boxes</h3>\n<p>To highlight some content, here is an example of a dark box with rounded corners and a subtle inset shadow :</p>\n<pre class=\"css\" name=\"code\">\n#menu li .black_box {\n\tbackground-color:#333333;\n\tcolor: #eeeeee;\n\ttext-shadow: 1px 1px 1px #000;\n\tpadding:4px 6px 4px 6px;\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px;\n\t-webkit-border-radius: 5px;\n\tborder-radius: 5px;\n\n\t/* Shadow */\n\t-webkit-box-shadow:inset 0 0 3px #000000;\n\t-moz-box-shadow:inset 0 0 3px #000000;\n\tbox-shadow:inset 0 0 3px #000000;\n}\n</pre>\n<h3>Restylings Lists</h3>\n<p>And to finish, here&#8217;s another way to style your lists using, again, some CSS3 :</p>\n<pre class=\"css\" name=\"code\">\n#menu li .greybox li {\n\tbackground:#F4F4F4;\n\tborder:1px solid #bbbbbb;\n\tmargin:0px 0px 4px 0px;\n\tpadding:4px 6px 4px 6px;\n\twidth:116px;\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px;\n\t-webkit-border-radius: 5px;\n\tborder-radius: 5px;\n}\n#menu li .greybox li:hover {\n\tbackground:#ffffff;\n\tborder:1px solid #aaaaaa;\n\tpadding:4px 6px 4px 6px;\n\tmargin:0px 0px 4px 0px;\n}\n</pre>\n<hr />\n<h2> <span>Step 6: </span> Handling Browser Compatibility and IE6</h2>\n<p>All browsers handle hover on non-anchor tags . . . except Internet Explorer 6; so our Mega Menu is still not working with this old browser. We can fix this problem thanks to a behavior file that will add this functionality. You can find it <a href=\"http://www.xs4all.nl/~peterned/csshover.html\">here</a>, and use conditional comments to target IE6 only; more explanations can be found via <a href=\"http://css-tricks.com/how-to-create-an-ie-only-stylesheet/\">this article</a> from CSS-Tricks.</p>\n<p>To target IE6, we&#8217;ll use the following code :</p>\n<pre class=\"html\" name=\"code\">\n&lt;!--[if IE 6]&gt;\n&lt;style&gt;\nbody {behavior: url(\"csshover3.htc\");}\n&lt;/style&gt;\n&lt;![endif]--&gt;\n</pre>\n<p>I&#8217;ve used a few PNG files in this tutorial, and, as everyone knows, IE6 doesn&#8217;t support transparency so we have different solutions :</p>\n<ul>\n<li>Convert them to GIF or PNG-8 format</li>\n<li><a href=\"http://net.tutsplus.com/articles/news/5-easy-ways-to-tackle-ie6s-transparency-issues/\">Use a script</a></li>\n<li>Set a background color other than the default grey with <a href=\"http://entropymine.com/jason/tweakpng/\">TweakPNG</a> for example</li>\n</ul>\n<p>I&#8217;ll let you choose the one that fits to your needs. Now, let&#8217;s review a full working example.</p>\n<hr />\n<h2>Final Example</h2>\n<h3>HTML Part</h3>\n<pre class=\"html\" name=\"code\">\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n\n&lt;link rel=\"stylesheet\" href=\"menu.css\" type=\"text/css\" media=\"screen\" /&gt;\n\n&lt;title&gt;Mega Drop Down Menu&lt;/title&gt;\n&lt;!--[if IE 6]&gt;\n&lt;style&gt;\nbody {behavior: url(\"csshover3.htc\");}\n#menu li .drop {background:url(\"img/drop.gif\") no-repeat right 8px;\n&lt;/style&gt;\n&lt;![endif]--&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;ul id=\"menu\"&gt;\n\n    &lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;Home&lt;/a&gt;&lt;!-- Begin Home Item --&gt;\n\n        &lt;div class=\"dropdown_2columns\"&gt;&lt;!-- Begin 2 columns container --&gt;\n\n            &lt;div class=\"col_2\"&gt;\n                &lt;h2&gt;Welcome !&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_2\"&gt;\n                &lt;p&gt;Hi and welcome here ! This is a showcase of the possibilities of this awesome Mega Drop Down Menu.&lt;/p&gt;\n                &lt;p&gt;This item comes with a large range of prepared typographic stylings such as headings, lists, etc.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_2\"&gt;\n                &lt;h2&gt;Cross Browser Support&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;img src=\"img/browsers.png\" width=\"125\" height=\"48\" alt=\"\" /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p&gt;This mega menu has been tested in all major browsers.&lt;/p&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;&lt;!-- End 2 columns container --&gt;\n\n    &lt;/li&gt;&lt;!-- End Home Item --&gt;\n\n    &lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;5 Columns&lt;/a&gt;&lt;!-- Begin 5 columns Item --&gt;\n\n        &lt;div class=\"dropdown_5columns\"&gt;&lt;!-- Begin 5 columns container --&gt;\n\n            &lt;div class=\"col_5\"&gt;\n                &lt;h2&gt;This is an example of a large container with 5 columns&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p class=\"black_box\"&gt;This is a dark grey box text. Fusce in metus at enim porta lacinia vitae a arcu. Sed sed lacus nulla mollis porta quis.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p&gt;Phasellus vitae sapien ac leo mollis porta quis sit amet nisi. Mauris hendrerit, metus cursus accumsan tincidunt.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p class=\"italic\"&gt;This is a sample of an italic text. Consequat scelerisque. Fusce sed lectus at arcu mollis accumsan at nec nisi porta quis sit amet.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p&gt;Curabitur euismod gravida ante nec commodo. Nunc dolor nulla, semper in ultricies vitae, vulputate porttitor neque.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n                &lt;p class=\"strong\"&gt;This is a sample of a bold text. Aliquam sodales nisi nec felis hendrerit ac eleifend lectus feugiat scelerisque.&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_5\"&gt;\n                &lt;h2&gt;Here is some content with side images&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_3\"&gt;\n\n                &lt;img src=\"img/01.jpg\" width=\"70\" height=\"70\" class=\"img_left imgshadow\" alt=\"\" /&gt;\n                &lt;p&gt;Maecenas eget eros lorem, nec pellentesque lacus. Aenean dui orci, rhoncus sit amet tristique eu, tristique sed odio. Praesent ut interdum elit. Sed in sem mauris. Aenean a commodo mi. Praesent augue lacus.&lt;a href=\"#\"&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n\n                &lt;img src=\"img/02.jpg\" width=\"70\" height=\"70\" class=\"img_left imgshadow\" alt=\"\" /&gt;\n                &lt;p&gt;Aliquam elementum felis quis felis consequat scelerisque. Fusce sed lectus at arcu mollis accumsan at nec nisi. Aliquam pretium mollis fringilla. Nunc in leo urna, eget varius metus. Aliquam sodales nisi.&lt;a href=\"#\"&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_2\"&gt;\n\n                &lt;p class=\"black_box\"&gt;This is a black box, you can use it to highligh some content. Sed sed lacus nulla, et lacinia risus. Phasellus vitae sapien ac leo mollis porta quis sit amet nisi. Mauris hendrerit, metus cursus accumsan tincidunt.Quisque vestibulum nisi non nunc blandit placerat. Mauris facilisis, risus ut lobortis posuere, diam lacus congue lorem, ut condimentum ligula est vel orci. Donec interdum lacus at velit varius gravida. Nulla ipsum risus.&lt;/p&gt;\n\n            &lt;/div&gt;\n\n        &lt;/div&gt;&lt;!-- End 5 columns container --&gt;\n\n    &lt;/li&gt;&lt;!-- End 5 columns Item --&gt;\n\n    &lt;li&gt;&lt;a href=\"#\" class=\"drop\"&gt;4 Columns&lt;/a&gt;&lt;!-- Begin 4 columns Item --&gt;\n\n        &lt;div class=\"dropdown_4columns\"&gt;&lt;!-- Begin 4 columns container --&gt;\n\n            &lt;div class=\"col_4\"&gt;\n                &lt;h2&gt;This is a heading title&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;h3&gt;Some Links&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;ThemeForest&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;GraphicRiver&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;ActiveDen&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;VideoHive&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;3DOcean&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;h3&gt;Useful Links&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;NetTuts&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;VectorTuts&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;PsdTuts&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;PhotoTuts&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;ActiveTuts&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;h3&gt;Other Stuff&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;FreelanceSwitch&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Creattica&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;WorkAwesome&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Mac Apps&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Web Apps&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;h3&gt;Misc&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Design&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Logo&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Flash&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Illustration&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;More...&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n        &lt;/div&gt;&lt;!-- End 4 columns container --&gt;\n\n    &lt;/li&gt;&lt;!-- End 4 columns Item --&gt;\n\n\t&lt;li class=\"menu_right\"&gt;&lt;a href=\"#\" class=\"drop\"&gt;1 Column&lt;/a&gt;\n\n\t\t&lt;div class=\"dropdown_1column align_right\"&gt;\n\n                &lt;div class=\"col_1\"&gt;\n\n                    &lt;ul class=\"simple\"&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;FreelanceSwitch&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Creattica&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;WorkAwesome&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Mac Apps&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Web Apps&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;NetTuts&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;VectorTuts&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;PsdTuts&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;PhotoTuts&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;ActiveTuts&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Design&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Logo&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Flash&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Illustration&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;More...&lt;/a&gt;&lt;/li&gt;\n                    &lt;/ul&gt;   \n\n                &lt;/div&gt;\n\n\t\t&lt;/div&gt;\n\n\t&lt;/li&gt;\n\n    &lt;li class=\"menu_right\"&gt;&lt;a href=\"#\" class=\"drop\"&gt;3 columns&lt;/a&gt;&lt;!-- Begin 3 columns Item --&gt;\n\n        &lt;div class=\"dropdown_3columns align_right\"&gt;&lt;!-- Begin 3 columns container --&gt;\n\n            &lt;div class=\"col_3\"&gt;\n                &lt;h2&gt;Lists in Boxes&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;ul class=\"greybox\"&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;FreelanceSwitch&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Creattica&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;WorkAwesome&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Mac Apps&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Web Apps&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;ul class=\"greybox\"&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;ThemeForest&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;GraphicRiver&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;ActiveDen&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;VideoHive&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;3DOcean&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_1\"&gt;\n\n                &lt;ul class=\"greybox\"&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Design&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Logo&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Flash&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Illustration&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;More...&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;   \n\n            &lt;/div&gt;\n\n            &lt;div class=\"col_3\"&gt;\n                &lt;h2&gt;Here are some image examples&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col_3\"&gt;\n                &lt;img src=\"img/02.jpg\" width=\"70\" height=\"70\" class=\"img_left imgshadow\" alt=\"\" /&gt;\n                &lt;p&gt;Maecenas eget eros lorem, nec pellentesque lacus. Aenean dui orci, rhoncus sit amet tristique eu, tristique sed odio. Praesent ut interdum elit. Maecenas imperdiet, nibh vitae rutrum vulputate, lorem sem condimentum.&lt;a href=\"#\"&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n\n                &lt;img src=\"img/01.jpg\" width=\"70\" height=\"70\" class=\"img_left imgshadow\" alt=\"\" /&gt;\n                &lt;p&gt;Aliquam elementum felis quis felis consequat scelerisque. Fusce sed lectus at arcu mollis accumsan at nec nisi. Aliquam pretium mollis fringilla. Vestibulum tempor facilisis malesuada. &lt;a href=\"#\"&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;&lt;!-- End 3 columns container --&gt;\n\n    &lt;/li&gt;&lt;!-- End 3 columns Item --&gt;\n\n&lt;/ul&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;</pre>\n<h3>CSS Part</h3>\n<pre class=\"css\" name=\"code\">\nbody, ul, li {\n\tfont-size:14px;\n\tfont-family:Arial, Helvetica, sans-serif;\n\tline-height:21px;\n\ttext-align:left;\n}\n\n/* Navigation Bar */\n\n#menu {\n\tlist-style:none;\n\twidth:940px;\n\tmargin:30px auto 0px auto;\n\theight:43px;\n\tpadding:0px 20px 0px 20px;\n\n\t/* Rounded Corners */\n\n\t-moz-border-radius: 10px;\n\t-webkit-border-radius: 10px;\n\tborder-radius: 10px;\n\n\t/* Background color and gradients */\n\n\tbackground: #014464;\n\tbackground: -moz-linear-gradient(top, #0272a7, #013953);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#0272a7), to(#013953));\n\n\t/* Borders */\n\n\tborder: 1px solid #002232;\n\n\t-moz-box-shadow:inset 0px 0px 1px #edf9ff;\n\t-webkit-box-shadow:inset 0px 0px 1px #edf9ff;\n\tbox-shadow:inset 0px 0px 1px #edf9ff;\n}\n\n#menu li {\n\tfloat:left;\n\ttext-align:center;\n\tposition:relative;\n\tpadding: 4px 10px 4px 10px;\n\tmargin-right:30px;\n\tmargin-top:7px;\n\tborder:none;\n}\n\n#menu li:hover {\n\tborder: 1px solid #777777;\n\tpadding: 4px 9px 4px 9px;\n\n\t/* Background color and gradients */\n\n\tbackground: #F4F4F4;\n\tbackground: -moz-linear-gradient(top, #F4F4F4, #EEEEEE);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#F4F4F4), to(#EEEEEE));\n\n\t/* Rounded corners */\n\n\t-moz-border-radius: 5px 5px 0px 0px;\n\t-webkit-border-radius: 5px 5px 0px 0px;\n\tborder-radius: 5px 5px 0px 0px;\n}\n\n#menu li a {\n\tfont-family:Arial, Helvetica, sans-serif;\n\tfont-size:14px;\n\tcolor: #EEEEEE;\n\tdisplay:block;\n\toutline:0;\n\ttext-decoration:none;\n\ttext-shadow: 1px 1px 1px #000;\n}\n\n#menu li:hover a {\n\tcolor:#161616;\n\ttext-shadow: 1px 1px 1px #FFFFFF;\n}\n#menu li .drop {\n\tpadding-right:21px;\n\tbackground:url(\"img/drop.png\") no-repeat right 8px;\n}\n#menu li:hover .drop {\n\tbackground:url(\"img/drop.png\") no-repeat right 7px;\n}\n\n/* Drop Down */\n\n.dropdown_1column,\n.dropdown_2columns,\n.dropdown_3columns,\n.dropdown_4columns,\n.dropdown_5columns {\n\tmargin:4px auto;\n\tfloat:left;\n\tposition:absolute;\n\tleft:-999em; /* Hides the drop down */\n\ttext-align:left;\n\tpadding:10px 5px 10px 5px;\n\tborder:1px solid #777777;\n\tborder-top:none;\n\n\t/* Gradient background */\n\tbackground:#F4F4F4;\n\tbackground: -moz-linear-gradient(top, #EEEEEE, #BBBBBB);\n\tbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#EEEEEE), to(#BBBBBB));\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 0px 5px 5px 5px;\n\t-webkit-border-radius: 0px 5px 5px 5px;\n\tborder-radius: 0px 5px 5px 5px;\n}\n\n.dropdown_1column {width: 140px;}\n.dropdown_2columns {width: 280px;}\n.dropdown_3columns {width: 420px;}\n.dropdown_4columns {width: 560px;}\n.dropdown_5columns {width: 700px;}\n\n#menu li:hover .dropdown_1column,\n#menu li:hover .dropdown_2columns,\n#menu li:hover .dropdown_3columns,\n#menu li:hover .dropdown_4columns,\n#menu li:hover .dropdown_5columns {\n\tleft:-1px;\n    top:auto;\n}\n\n/* Columns */\n\n.col_1,\n.col_2,\n.col_3,\n.col_4,\n.col_5 {\n\tdisplay:inline;\n\tfloat: left;\n\tposition: relative;\n\tmargin-left: 5px;\n\tmargin-right: 5px;\n}\n.col_1 {width:130px;}\n.col_2 {width:270px;}\n.col_3 {width:410px;}\n.col_4 {width:550px;}\n.col_5 {width:690px;}\n\n/* Right alignment */\n\n#menu .menu_right {\n\tfloat:right;\n\tmargin-right:0px;\n}\n#menu li .align_right {\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px 0px 5px 5px;\n    -webkit-border-radius: 5px 0px 5px 5px;\n    border-radius: 5px 0px 5px 5px;\n}\n#menu li:hover .align_right {\n\tleft:auto;\n\tright:-1px;\n\ttop:auto;\n}\n\n/* Drop Down Content Stylings */\n\n#menu p, #menu h2, #menu h3, #menu ul li {\n\tfont-family:Arial, Helvetica, sans-serif;\n\tline-height:21px;\n\tfont-size:12px;\n\ttext-align:left;\n\ttext-shadow: 1px 1px 1px #FFFFFF;\n}\n#menu h2 {\n\tfont-size:21px;\n\tfont-weight:400;\n\tletter-spacing:-1px;\n\tmargin:7px 0 14px 0;\n\tpadding-bottom:14px;\n\tborder-bottom:1px solid #666666;\n}\n#menu h3 {\n\tfont-size:14px;\n\tmargin:7px 0 14px 0;\n\tpadding-bottom:7px;\n\tborder-bottom:1px solid #888888;\n}\n#menu p {\n\tline-height:18px;\n\tmargin:0 0 10px 0;\n}\n\n#menu li:hover div a {\n\tfont-size:12px;\n\tcolor:#015b86;\n}\n#menu li:hover div a:hover {\n\tcolor:#029feb;\n}\n.strong {\n\tfont-weight:bold;\n}\n.italic {\n\tfont-style:italic;\n}\n.imgshadow {\n\tbackground:#FFFFFF;\n\tpadding:4px;\n\tborder:1px solid #777777;\n\tmargin-top:5px;\n\t-moz-box-shadow:0px 0px 5px #666666;\n\t-webkit-box-shadow:0px 0px 5px #666666;\n\tbox-shadow:0px 0px 5px #666666;\n}\n.img_left { /* Image sticks to the left */\n\twidth:auto;\n\tfloat:left;\n\tmargin:5px 15px 5px 5px;\n}\n#menu li .black_box {\n\tbackground-color:#333333;\n\tcolor: #eeeeee;\n\ttext-shadow: 1px 1px 1px #000;\n\tpadding:4px 6px 4px 6px;\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px;\n\t-webkit-border-radius: 5px;\n\tborder-radius: 5px;\n\n\t/* Shadow */\n\t-webkit-box-shadow:inset 0 0 3px #000000;\n\t-moz-box-shadow:inset 0 0 3px #000000;\n\tbox-shadow:inset 0 0 3px #000000;\n}\n#menu li ul {\n\tlist-style:none;\n\tpadding:0;\n\tmargin:0 0 12px 0;\n}\n#menu li ul li {\n\tfont-size:12px;\n\tline-height:24px;\n\tposition:relative;\n\ttext-shadow: 1px 1px 1px #ffffff;\n\tpadding:0;\n\tmargin:0;\n\tfloat:none;\n\ttext-align:left;\n\twidth:130px;\n}\n#menu li ul li:hover {\n\tbackground:none;\n\tborder:none;\n\tpadding:0;\n\tmargin:0;\n}\n#menu li .greybox li {\n\tbackground:#F4F4F4;\n\tborder:1px solid #bbbbbb;\n\tmargin:0px 0px 4px 0px;\n\tpadding:4px 6px 4px 6px;\n\twidth:116px;\n\n\t/* Rounded Corners */\n\t-moz-border-radius: 5px;\n\t-webkit-border-radius: 5px;\n\tborder-radius: 5px;\n}\n#menu li .greybox li:hover {\n\tbackground:#ffffff;\n\tborder:1px solid #aaaaaa;\n\tpadding:4px 6px 4px 6px;\n\tmargin:0px 0px 4px 0px;\n}\n</pre>\n<hr />\n<h2>Interesting and Relevant Links</h2>\n<ul>\n<li><a href=\"http://www.smashingmagazine.com/2009/03/24/designing-drop-down-menus-examples-and-best-practices/\">Designing Drop-Down Menus: Examples and Best Practices</a></li>\n<li><a href=\"http://www.pvmgarage.com/2010/02/mega-drop-down-menu-enjoy-it-responsibly/\">Mega Drop-Down Menu, Enjoy It Responsibly!</a></li>\n<li><a href=\"http://blogs.sitepoint.com/2009/03/30/mega-drop-down-menus/\">Mega Menus: the Next Web Design Trend</a></li>\n<li><a href=\"http://www.useit.com/alertbox/mega-dropdown-menus.html\">Mega Drop-Down Navigation Menus Work Well</a></li>\n<li><a href=\"http://designm.ag/inspiration/mega-menus/\">25 Examples of Mega Menus in Web Design</a></li>\n<li><a href=\"http://www.smileycat.com/design_elements/mega_dropdown_menus/\">Mega Drop-Down Menus (46 examples)</a></li>\n</ul>\n<hr />\n<h2>Conclusion</h2>\n<p>I hope you&#8217;ve enjoyed this tutorial on creating mega menus. Thanks for following along!</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=A7nvWfVpQdU:wMOe6akK6VI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=A7nvWfVpQdU:wMOe6akK6VI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=A7nvWfVpQdU:wMOe6akK6VI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=A7nvWfVpQdU:wMOe6akK6VI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=A7nvWfVpQdU:wMOe6akK6VI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=A7nvWfVpQdU:wMOe6akK6VI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=A7nvWfVpQdU:wMOe6akK6VI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=A7nvWfVpQdU:wMOe6akK6VI:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/A7nvWfVpQdU\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/tutorials/html-css-techniques/how-to-build-a-kick-butt-css3-mega-drop-down-menu/feed/","origLink":"http://net.tutsplus.com/tutorials/html-css-techniques/how-to-build-a-kick-butt-css3-mega-drop-down-menu/"},{"title":"Envato ‘WordPress Pack’ Bundle!","link":"http://feedproxy.google.com/~r/nettuts/~3/a_FKwzNIIWc/","comments":["http://net.tutsplus.com/articles/news/envato-wordpress-pack-bundle/#comments","10"],"pubDate":"Wed, 13 Oct 2010 01:08:56 +0000","creator":"Collis Ta'eed","category":"News","guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15226"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/vkeMvcIVNCpNXDrrg83fygzDmFA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/vkeMvcIVNCpNXDrrg83fygzDmFA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/vkeMvcIVNCpNXDrrg83fygzDmFA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/vkeMvcIVNCpNXDrrg83fygzDmFA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Love WordPress? Well you&#8217;re going to love our latest Envato Bundle &#8211; the <a href=\"http://codecanyon.net/bundles/wordpress-pack/\">WordPress Pack</a> &#8211; which has over $250 of premium WP Themes, Plugins, a mobile theme, a psd template, a copy of my book How to Be a Rockstar WordPress Designer, and a Tuts Premium tutorial series, all for the amazing price of $30! But it&#8217;s only available for 7 days, so grab it while it&#8217;s hot!<span id=\"more-15226\"></span></p>\n<hr />\n<h2><a href=\"http://codecanyon.net/item/envato-wordpress-pack-bundle/130662/\">Buy the Envato &#8216;WordPress Pack&#8217; Bundle</a></h2>\n<p>You can <a href=\"http://codecanyon.net/bundles/wordpress-pack/\">get more details about the bundle</a> over on our central bundle page. Or if you are ready to start buying, head to CodeCanyon&#8217;s WordPress Pack Item Page to <a href=\"http://codecanyon.net/item/envato-wordpress-pack-bundle/130662/\">Buy it Now</a>!</p>\n<div class=\"tutorial_image\"><a href=\"http://codecanyon.net/bundles/wordpress-pack/\"><img src=\"http://psd.tutsplus.com/wp-content/uploads/2010/10/600.gif\"></a></div>\n<h5><a href=\"http://graphicriver.net/user/mljarmin/portfolio\">Like the Illustration? Check out mljarmin&#8217;s entire portfolio on GraphicRiver</a>.</h5>\n<hr />\n<h2>Promote the Bundle, earn 30%</h2>\n<div class=\"tutorial_image\"><img src=\"http://psd.tutsplus.com/wp-content/uploads/2010/10/earn30.jpg\"></div>\n<p>If our Birthday Bundle is anything to go by, this bundle is going to sell a mountain of copies. If you&#8217;d like to earn some quick cash this week, you can promote the bundle using our referral program and earn 30% of sales. <a href=\"http://wiki.envato.com/referral/tips-referral/promote-the-wordpress-pack/\">Promote the WordPress Pack Bundle</a>.</p>\n<hr />\n<h2>Sell Your Themes and Plugins</h2>\n<p><a href=\"http://themeforest.net\">ThemeForest</a> and <a href=\"http://codecanyon.net\">CodeCanyon</a> have been helping authors around the world earn thousands and thousands of dollars every month selling their WordPress work. And with our <a href=\"http://notes.envato.com/news/new-permanent-author-rates-on-envato-marketplaces/\">recently massive author rate upgrade</a> you&#8217;ll earn even more! </p>\n<p>So if you have the skills, join us today! </p>\n<hr />\n<h2>Envato + WordPress</h2>\n<div class=\"tutorial_image\"><img src=\"http://psd.tutsplus.com/wp-content/uploads/2010/10/envatowp.jpg\"></div>\n<p>As you probably know, here at Envato we are pretty WordPress crazy. Not only do we run a bazillion blogs on the platform, we also have tutorials, books, and of course the world&#8217;s largest <a href=\"http://themeforest.net\">Premium WordPress Theme Marketplace</a>, and more recently, the world&#8217;s largest<a href=\"http://codecanyon.net\"> Premium WordPress Plugin Marketplace</a>. To give you a sense of how successful ThemeForest in particular has been, our WP library there is over 800 strong. That&#8217;s 2/3 the size of the WordPress.org <em>free</em> library! And that&#8217;s despite the fact that we are quite discriminating about what is accepted into the marketplace. </p>\n<p>All our themes and plugins are GPL compliant, and have been since 2009. We&#8217;ve also begun open sourcing plugins we use here on the Tuts+ sites, and look forward to adding more to the WordPress community. Finally, if you are organizing a WordCamp, we will be opening an official Envato sponsorship channel to help support community meetups around the globe, so stay tuned! If you have any ideas on how else we can support the WordPress community, get in touch or add a comment!</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=a_FKwzNIIWc:BFVpM_gFqnU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=a_FKwzNIIWc:BFVpM_gFqnU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=a_FKwzNIIWc:BFVpM_gFqnU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=a_FKwzNIIWc:BFVpM_gFqnU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=a_FKwzNIIWc:BFVpM_gFqnU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=a_FKwzNIIWc:BFVpM_gFqnU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=a_FKwzNIIWc:BFVpM_gFqnU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=a_FKwzNIIWc:BFVpM_gFqnU:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/a_FKwzNIIWc\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/articles/news/envato-wordpress-pack-bundle/feed/","origLink":"http://net.tutsplus.com/articles/news/envato-wordpress-pack-bundle/"},{"title":"10 Free Copies of “JavaScript Patterns” from O’Reilly Books","link":"http://feedproxy.google.com/~r/nettuts/~3/IVCSTeRa14g/","comments":["http://net.tutsplus.com/freebies/books/10-free-copies-of-javascript-patterns-from-oreilly-books/#comments","30"],"pubDate":"Tue, 12 Oct 2010 14:32:13 +0000","creator":"Jeffrey Way","category":["Books","books","JavaScript","javascript patterns","o'reilly"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15176"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/oh_BluLi7-xPZJax47Vzh2qGkIU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/oh_BluLi7-xPZJax47Vzh2qGkIU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/oh_BluLi7-xPZJax47Vzh2qGkIU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/oh_BluLi7-xPZJax47Vzh2qGkIU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>\nNot only was <a href=\"http://www.phpied.com\">Stoyan Stefanov</a> nice enough to <a href=\"http://net.tutsplus.com/?p=15145\">submit an excerpt of his book</a>, <a href=\"http://amzn.to/93szK7\">JavaScript Patterns</a>, to Nettuts+, but we also have ten digital copies available to give away to our community! Personally, I&#8217;m roughly 75% finished with the book, and it&#8217;s fantastic. Similar to his previous book, &#8220;<a href=\"http://amzn.to/cxw4kS\">Object-Oriented JavaScript</a>,&#8221; <a href=\"http://www.phpied.com\">Stoyan</a> has an uncanny ability to make high level techniques and concepts as easy as possible to understand. Even if you don&#8217;t win a copy, &#8220;<a href=\"http://amzn.to/93szK7\">JavaScript Patterns</a>&#8221; receives my highest recommendation.\n</p>\n<p><span id=\"more-15176\"></span></p>\n<hr />\n<h2> How to Win a Copy </h2>\n<p>Leaving a comment to enter is old-fashioned; let&#8217;s help educate the TwitterVerse. In 140 characters or less, tweet a JavaScript best practice, and then hash, &#8220;#jsEdu,&#8221; like so: </p>\n<div class=\"tutorial_image\">\n    <img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/820_javascript_patterns/tweetEx.png\" alt=\"Example Tweet\" />\n</div>\n<p>On October 14th (US EST), I&#8217;ll choose ten helpful tweets that contain the <em>#jsEdu</em> hash, and update this posting to announce the winners! </p>\n<hr />\n<h2> <a href=\"http://amzn.to/93szK7\">Buy the Book</a> </h2>\n<div class=\"tutorial_image\">\n<a href=\"http://amzn.to/93szK7\"><br />\n    <img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/820_javascript_patterns/book_javascript_patterns.jpg\" alt=\"JavaScript Patterns\" /><br />\n</a>\n</div>\n<p>What&#8217;s the best approach for developing an application with JavaScript? This book helps you answer that question with numerous JavaScript coding patterns and best practices. If you&#8217;re an experienced developer looking to solve problems related to objects, functions, inheritance, and other language-specific categories, the abstractions and code templates in this guide are ideal &#8212; whether you&#8217;re writing a client-side, server-side, or desktop application with JavaScript.</p>\n<p>Written by JavaScript expert Stoyan Stefanov &#8212; Senior Yahoo! Technical and architect of YSlow 2.0, the web page performance optimization tool &#8212; JavaScript Patterns includes practical advice for implementing each pattern discussed, along with several hands-on examples. You&#8217;ll also learn about anti-patterns: common programming approaches that cause more problems than they solve.</p>\n<ul>\n<li> Explore useful habits for writing high-quality JavaScript code, such as avoiding globals, using single var declarations, and more </li>\n<li> Learn why literal notation patterns are simpler alternatives to constructor functions </li>\n<li> Discover different ways to define a function in JavaScript </li>\n<li> Create objects that go beyond the basic patterns of using object literals and constructor functions </li>\n<li> Learn the options available for code reuse and inheritance in JavaScript </li>\n<li> Study sample JavaScript approaches to common design patterns such as Singleton, Factory, Decorator, and more </li>\n<li> Examine patterns that apply specifically to the client-side browser environment  </li>\n</ul>\n<hr />\n<h2>About the Author </h2>\n<p>\n<a href=\"http://www.phpied.com\">Stoyan Stefanov</a> is a Yahoo! web developer and an <a href=\"http://www.amazon.com/Object-Oriented-JavaScript-Stoyan-Stefanov/dp/1847194141/?tag=w3clubs-20\">author</a>, contributor, and tech reviewer of various O&#8217;Reilly books.  He speaks regularly about web development topics at conferences and on his blog at <a href=\"http://www.phpied.com\">www.phpied.com</a>. Stoyan is the creator of the smush.it image optimization tool, YUI contributor and architect of Yahoo&#8217;s performance optimization tool YSlow 2.0.</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=IVCSTeRa14g:U5BOItQeT6o:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=IVCSTeRa14g:U5BOItQeT6o:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=IVCSTeRa14g:U5BOItQeT6o:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=IVCSTeRa14g:U5BOItQeT6o:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=IVCSTeRa14g:U5BOItQeT6o:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=IVCSTeRa14g:U5BOItQeT6o:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=IVCSTeRa14g:U5BOItQeT6o:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=IVCSTeRa14g:U5BOItQeT6o:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/IVCSTeRa14g\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/freebies/books/10-free-copies-of-javascript-patterns-from-oreilly-books/feed/","origLink":"http://net.tutsplus.com/freebies/books/10-free-copies-of-javascript-patterns-from-oreilly-books/"},{"title":"The Essentials of Writing High Quality JavaScript","link":"http://feedproxy.google.com/~r/nettuts/~3/MaE_EDsJRuo/","comments":["http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/#comments","33"],"pubDate":"Tue, 12 Oct 2010 14:32:01 +0000","creator":"Stoyan Stefanov","category":["JavaScript & AJAX","JavaScript","javascript patterns"],"guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15145"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/L-Manne35gRssb_ApNqUSEwiadU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L-Manne35gRssb_ApNqUSEwiadU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/L-Manne35gRssb_ApNqUSEwiadU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L-Manne35gRssb_ApNqUSEwiadU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>The brilliant <a href=\"http://www.phpied.com\">Stoyan Stefanov</a>, in promotion of his new book from <a href=\"http://oreilly.com/\">O&#8217;Reilly</a>, &#8220;<a href=\"http://amzn.to/93szK7\">JavaScript Patterns</a>,&#8221; was kind enough to contribute an excerpt of the book for our readers, which details the essentials of writing high quality JavaScript, such as avoiding globals, using single var declarations, pre-caching length in loops, following coding conventions, and more.\n</p>\n<p><span id=\"more-15145\"></span></p>\n<p>\nThis excerpt also includes some habits not necessarily related to the code itself, but more about the overall code creation process, including writing API documentation, conducting peer reviews, and running JSLint. These habits and best practices can help you write better, more understandable, and maintainable code—code to be proud of (and be able to figure out) when revisiting it months and years down the road.\n</p>\n<hr />\n<h2> Writing Maintainable Code </h2>\n<p>Software bugs are costly to fix. And their cost increases over time, especially if the bugs creep into the publicly released product. It’s best if you can fix a bug right away, as soon you find it; this is when the problem your code solves is still fresh in your head. Otherwise you move on to other tasks and forget all about that particular code. Revisiting the code after some time has passed requires:</p>\n<ul>\n<li>Time to relearn and understand the problem </li>\n<p><lI>Time to understand the code that is supposed to solve the problem</li>\n</ul>\n<p>Another problem, specific to bigger projects or companies, is that the person who eventually fixes the bug is not the same person who created the bug (and also not the same person who found the bug). It’s therefore critical to reduce the time it takes to understand code, either written by yourself some time ago or written by another developer in the team. It’s critical to both the bottom line (business revenue) and the developer’s happiness, because we would all rather develop something new and exciting instead of spending hours and days maintaining old legacy code.</p>\n<p>Another fact of life related to software development in general is that usually more time is spent <em>reading</em> code than <em>writing</em> it. In times when you’re focused and deep into a problem, you can sit down and in one afternoon create a considerable amount of code.</p>\n<p>The code will probably work then and there, but as the application matures, many other things happen that require your code to be reviewed, revised, and tweaked. For example:</p>\n<ul>\n<li>Bugs are uncovered.</li>\n<li>New features are added to the application.</li>\n<li>The application needs to work in new environments (for example, new browsers appear on the market).</li>\n<li>The code gets repurposed.</li>\n<li>The code gets completely rewritten from scratch or ported to another architecture or even another language.</li>\n</ul>\n<p>As a result of the changes, the few man-hours spent writing the code initially end up in man-weeks spent reading it. That’s why creating maintainable code is critical to the success of an application.</p>\n<p>Maintainable code means code that:</p>\n<ul>\n<li>Is readable </li>\n<li>\tIs consistent </li>\n<li>Is predictable </li>\n<li>\tLooks as if it was written by the same person </li>\n<li>\tIs documented </li>\n</ul>\n<hr />\n<h2>Minimizing Globals</h2>\n<p>JavaScript uses functions to manage scope. A variable declared inside of a function is local to that function and not available outside the function. On the other hand, global variables are those declared outside of any function or simply used without being declared.</p>\n<p>Every JavaScript environment has a global object accessible when you use this outside of any function. Every global variable you create becomes a property of the global object. In browsers, for convenience, there is an additional property of the global object called window that (usually) points to the global object itself. The following code snippet shows how to create and access a global variable in a browser environment:</p>\n<pre name=\"code\" class=\"js\">\nmyglobal = \"hello\"; // antipattern\nconsole.log(myglobal); // \"hello\"\nconsole.log(window.myglobal); // \"hello\"\nconsole.log(window[\"myglobal\"]); // \"hello\"\nconsole.log(this.myglobal); // \"hello\"\n</pre>\n<hr />\n<h2>\nThe Problem with Globals<br />\n</h2>\n<p>The problem with global variables is that they are shared among all the code in your JavaScript application or web page. They live in the same global namespace and there is always a chance of naming collisions—when two separate parts of an application define global variables with the same name but with different purposes.</p>\n<p>It’s also common for web pages to include code not written by the developers of the page, for example:</p>\n<ul>\n<li>A third-party JavaScript library </li>\n<li>Scripts from an advertising partner </li>\n<li>Code from a third-party user tracking and analytics script </li>\n<li>Different kinds of widgets, badges, and buttons </li>\n</ul>\n<p>Let’s say that one of the third-party scripts defines a global variable, called, for example, result. Then later in one of your functions you define another global variable called result. The outcome of that is the last result variable overwrites the previous ones, and the third-party script may just stop working.</p>\n<p>Therefore it’s important to be a good neighbor to the other scripts that may be in the same page and use as few global variables as possible. Later in the book you learn about strategies to minimize the number of globals, such as the namespacing pattern or the self-executing immediate functions, but the most important pattern for having fewer globals is to always use var to declare variables.</p>\n<p>It is surprisingly easy to create globals involuntarily because of two JavaScript features. First, you can use variables without even declaring them. And second, JavaScript has the notion of implied globals, meaning that any variable you don’t declare becomes a property of the global object (and is accessible just like a properly declared global variable). Consider the following example:</p>\n<pre name=\"code\" class=\"js\">\nfunction sum(x, y) {\n   // antipattern: implied global\n   result = x + y;\n   return result;\n}\n</pre>\n<p>In this code, <code>result</code> is used without being declared. The code works fine, but after calling the function you end up with one more variable <code>result</code> in the global namespace that can be a source of problems.</p>\n<p>The rule of thumb is to always declare variables with <code>var</code>, as demonstrated in the improved version of the <code>sum()</code> function:</p>\n<pre name=\"code\" class=\"js\">\nfunction sum(x, y) {\n   var result = x + y;\n   return result;\n}\n</pre>\n<p>Another antipattern that creates implied globals is to chain assignments as part of a var declaration. In the following snippet, <code>a</code> is local but <code>b</code> becomes global, which is probably not what you meant to do:</p>\n<pre name=\"code\" class=\"js\">\n// antipattern, do not use\nfunction foo() {\n   var a = b = 0;\n   // ...\n}\n</pre>\n<p>If you’re wondering why that happens, it’s because of the right-to-left evaluation. First, the expression b = 0 is evaluated and in this case b is not declared. The return value of this expression is 0, and it’s assigned to the new local variable declared with var a. In other words, it’s as if you’ve typed:</p>\n<pre name=\"code\" class=\"js\">\nvar a = (b = 0);\n</pre>\n<p>If you’ve already declared the variables, chaining assignments is fine and doesn’t create unexpected globals. Example:</p>\n<pre name=\"code\" class=\"js\">\nfunction foo() {\n   var a, b;\n   // ... a = b = 0; // both local\n}\n</pre>\n<blockquote>\n<p>Yet another reason to avoid globals is portability. If you want your code to run in different environments (hosts), it’s dangerous to use globals because you can accidentally overwrite a host object that doesn’t exist in your original environment (so you thought the name was safe to use) but which does in some of the others.\n</p>\n</blockquote>\n<hr />\n<h2>\nSide Effects When Forgetting var<br />\n</h2>\n<p>There’s one slight difference between implied globals and explicitly defined ones—the difference is in the ability to undefine these variables using the delete operator:</p>\n<ul>\n<li>Globals created with var (those created in the program outside of any function) cannot be deleted.</li>\n<li>Implied globals created without var (regardless if created inside functions) can be deleted.</li>\n</ul>\n<p>This shows that implied globals are technically not real variables, but they are properties of the global object. Properties can be deleted with the delete operator whereas variables cannot:</p>\n<pre name=\"code\" class=\"js\">\n// define three globals\nvar global_var = 1;\nglobal_novar = 2; // antipattern\n(function () {\n   global_fromfunc = 3; // antipattern\n}());\n\n// attempt to delete\ndelete global_var; // false\ndelete global_novar; // true\ndelete global_fromfunc; // true\n\n// test the deletion\ntypeof global_var; // \"number\"\ntypeof global_novar; // \"undefined\"\ntypeof global_fromfunc; // \"undefined\"\n</pre>\n<p>In ES5 strict mode, assignments to undeclared variables (such as the two antipatterns in the preceding snippet) will throw an error.</p>\n<hr />\n<h2>\nAccess to the Global Object<br />\n</h2>\n<p>In the browsers, the global object is accessible from any part of the code via the <code>window</code> property (unless you’ve done something special and unexpected such as declaring a local variable named <code>window</code>). But in other environments this convenience property may be called something else (or even not available to the programmer). If you need to access the global object without hard-coding the identifier <code>window</code>, you can do the following from any level of nested function scope:</p>\n<pre name=\"code\" class=\"js\">\nvar global = (function () {\n   return this;\n}());\n</pre>\n<p>This way you can always get the global object, because inside functions that were invoked as functions (that is, not as constrictors with <code>new</code>) this should always point to the global object. This is actually no longer the case in ECMAScript 5 in strict mode, so you have to adopt a different pattern when your code is in strict mode. For example, if you’re developing a library, you can wrap your library code in an immediate function and then from the global scope, pass a reference to this as a parameter to your immediate function.</p>\n<hr />\n<h2>\nSingle var Pattern<br />\n</h2>\n<p>Using a single var statement at the top of your functions is a useful pattern to adopt. It has the following benefits:</p>\n<ul>\n<li>Provides a single place to look for all the local variables needed by the function </li>\n<li>Prevents logical errors when a variable is used before it’s defined </li>\n<li>Helps you remember to declare variables and therefore minimize globals </li>\n<li>Is less code (to type and to transfer over the wire) </li>\n</ul>\n<p>The single var pattern looks like this:</p>\n<pre name=\"code\" class=\"js\">\nfunction func() {\n   var a = 1,\n       b = 2,\n       sum = a + b,\n       myobject = {},\n       i,\n       j;\n   // function body...\n}\n</pre>\n<p>You use one var statement and declare multiple variables delimited by commas. It’s a good practice to also <em>initialize</em> the variable with an initial value at the time you declare it. This can prevent logical errors (all uninitialized and declared variables are initialized with the value <code>undefined</code>) and also improve the code readability. When you look at the code later, you can get an idea about the intended use of a variable based on its initial value—for example, was it supposed to be an object or an integer?</p>\n<p>You can also do some actual work at the time of the declaration, like the case with <code>sum = a + b</code> in the preceding code. Another example is when working with DOM (Document Object Model) references. You can assign DOM references to local variables together with the single declaration, as the following code demonstrates:</p>\n<pre name=\"code\" class=\"js\">\nfunction updateElement() {\n   var el = document.getElementById(\"result\"),\n       style = el.style;\n   // do something with el and style...\n}\n</pre>\n<hr />\n<h2>\nHoisting: A Problem with Scattered vars<br />\n</h2>\n<p>JavaScript enables you to have multiple <code>var</code> statements anywhere in a function, and they all act as if the variables were declared at the top of the function. This behavior is known as hoisting. This can lead to logical errors when you use a variable and then you declare it further in the function. For JavaScript, as long as a variable is in the same scope (same function), it’s considered declared, even when it’s used before the var declaration. Take a look at this example:</p>\n<pre name=\"code\" class=\"js\">\n// antipattern\nmyname = \"global\"; // global variable\nfunction func() {\n    alert(myname); // \"undefined\"\n    var myname = \"local\";\n    alert(myname); // \"local\"\n}\nfunc();\n</pre>\n<p>In this example, you might expect that the first <code>alert() </code>will prompt “global” and the second will prompt “local.” It’s a reasonable expectation because, at the time of the first alert, <code>myname</code> was not declared and therefore the function should probably “see” the global <code>myname</code>. But that’s not how it works. The first alert will say “undefined” because <code>myname</code> is considered declared as a local variable to the function. (Although the declaration comes after.) All the variable declarations get hoisted to the top of the function. Therefore to avoid this type of confusion, it’s best to declare upfront all variables you intend to use.</p>\n<p>The preceding code snippet will behave as if it were implemented like so:</p>\n<pre name=\"code\" class=\"js\">\nmyname = \"global\"; // global variable\nfunction func() {\n   var myname; // same as -> var myname = undefined;\n   alert(myname); // \"undefined\"\n   myname = \"local\";\n   alert(myname); // \"local\"\n}\nfunc();\n</pre>\n<blockquote><p>\nFor completeness, let’s mention that actually at the implementation level things are a little more complex. There are two stages of the code handling, where variables, function declarations, and formal parameters are created at the first stage, which is the stage of parsing and entering the context. In the second stage, the stage of runtime code execution, function expressions and unqualified identifiers (undeclared variables) are created. But for practical purposes, we can adopt the concept of hoisting, which is actually not defined by ECMAScript standard but is commonly used to describe the behavior.</p>\n</blockquote>\n<hr />\n<h2>\nfor Loops<br />\n</h2>\n<p>In <code>for</code> loops you iterate over <code>arrays</code> or array-like objects such as <code>arguments</code> and <code>HTMLCollection</code> objects. The usual <code>for</code> loop pattern looks like the following:</p>\n<pre name=\"code\" class=\"js\">\n// sub-optimal loop\nfor (var i = 0; i < myarray.length; i++) {\n   // do something with myarray[i]\n}\n</pre>\n<p>A problem with this pattern is that the length of the array is accessed on every loop iteration. This can slow down your code, especially when <code>myarray</code> is not an array but an <code>HTMLCollection</code> object.</p>\n<p><code>HTMLCollection</code>s are objects returned by DOM methods such as:</p>\n<ul>\n<li><code>document.getElementsByName()</code> </li>\n<li><code>document.getElementsByClassName()</code> </li>\n<li><code>document.getElementsByTagName()</code> </li>\n</ul>\n<p>There are also a number of other <code>HTMLCollections</code>, which were introduced before the DOM standard and are still in use today. There include (among others):</p>\n<ul>\n<li><code>document.images</code>: All IMG elements on the page</li>\n<li><code>document.links</code> : All A elements</li>\n<li><code>document.forms</code> : All forms </li>\n<li><code>document.forms[0].elements</code> : All fields in the first form on the page </li>\n</ul>\n<p>The trouble with collections is that they are live queries against the underlying document (the HTML page). This means that every time you access any collection’s <code>length</code>, you’re querying the live DOM, and DOM operations are expensive in general.</p>\n<p>That’s why a better pattern for <code>for</code> loops is to cache the length of the array (or collection) you’re iterating over, as shown in the following example:</p>\n<pre name=\"code\" class=\"js\">\nfor (var i = 0, max = myarray.length; i < max; i++) {\n   // do something with myarray[i]\n}\n</pre>\n<p>This way you retrieve the value of length only once and use it during the whole loop.</p>\n<p>Caching the length when iterating over <code>HTMLCollections</code> is faster across all browsers— anywhere between two times faster (Safari 3) and 190 times (IE7). </p>\n<p>Note that when you explicitly intend to modify the collection in the loop (for example, by adding more DOM elements), you’d probably like the length to be updated and not constant.</p>\n<p>Following the single var pattern, you can also take the var out of the loop and make the loop like:</p>\n<pre name=\"code\" class=\"js\">\nfunction looper() {\n   var i = 0,\n        max,\n        myarray = [];\n   // ...\n   for (i = 0, max = myarray.length; i < max; i++) {\n      // do something with myarray[i]\n   }\n}\n</pre>\n<p>This pattern has the benefit of consistency because you stick to the single var pattern. A drawback is that it makes it a little harder to copy and paste whole loops while refactoring code. For example, if you’re copying the loop from one function to another, you have to make sure you also carry over <code>i</code> and <code>max</code> into the new function (and probably delete them from the original function if they are no longer needed there).</p>\n<p>One last tweak to the loop would be to substitute <code>i++</code> with either one of these expressions:</p>\n<pre name=\"code\" class=\"js\">\ni=i+ 1\ni += 1\n</pre>\n<p>JSLint prompts you to do it; the reason being that <code>++</code> and <code>--</code> promote “excessive trickiness.” If you disagree with this, you can set the JSLint option <code>plusplus</code> to <code>false</code>. (It’s true by default.) </p>\n<p>Two variations of the for pattern introduce some micro-optimizations because they: </p>\n<ul>\n<li>Use one less variable (no <code>max</code>)</li>\n<li>Count down to <code>0</code>, which is usually faster because it’s more efficient to compare to 0 than to the length of the array or to anything other than <code>0</code></li>\n</ul>\n<p>The first modified pattern is:</p>\n<pre name=\"code\" class=\"js\">\nvar i, myarray = [];\nfor (i = myarray.length; i--;) {\n   // do something with myarray[i]\n}\n</pre>\n<p>And the second uses a <code>while</code> loop: </p>\n<pre name=\"code\" class=\"js\">\nvar myarray = [],\n    i = myarray.length;\nwhile (i--) {\n   // do something with myarray[i]\n}\n</pre>\n<p>These are micro-optimizations and will only be noticed in performance-critical operations. Additionally, JSLint will complain about the use of<code> i--</code>.</p>\n<hr />\n<h2>\nfor-in Loops<br />\n</h2>\n<p>\n<code>for-in</code> loops should be used to iterate over nonarray objects. Looping with <code>for-in</code> is also called <code>enumeration</code>.</p>\n<p>Technically, you can also use for-in to loop over arrays (because in JavaScript arrays are objects), but it’s not recommended. It may lead to logical errors if the array object has already been augmented with custom functionality. Additionally, the order (the sequence) of listing the properties is not guaranteed in a <code>for-in</code>. So it’s preferable to use normal for loops with arrays and for-in loops for objects.</p>\n<p>It’s important to use the method <code>hasOwnProperty()</code> when iterating over object properties to filter out properties that come down the prototype chain.</p>\n<p>Consider the following example:</p>\n<pre name=\"code\" class=\"js\">\n// the object\nvar man = {\n   hands: 2,\n   legs: 2,\n   heads: 1\n};\n\n// somewhere else in the code\n// a method was added to all objects\nif (typeof Object.prototype.clone === \"undefined\") {\n   Object.prototype.clone = function () {};\n}\n</pre>\n<p>In this example we have a simple object called man defined with an object literal. Somewhere before or after man was defined, the Object prototype was augmented with a useful method called <code>clone()</code>. The prototype chain is live, which means all objects automatically get access to the new method. To avoid having the <code>clone()</code> method show up when enumerating man, you need to call <code>hasOwnProperty()</code> to filter out the prototype properties. Failing to do the filtering can result in the function <code>clone()</code> showing up, which is undesired behavior in mostly all scenarios:</p>\n<pre name=\"code\" class=\"js\">\n// 1.\n// for-in loop\nfor (var i in man) {\n   if (man.hasOwnProperty(i)) { // filter\n      console.log(i, \":\", man[i]);\n   }\n}\n/* result in the console\nhands : 2\nlegs : 2\nheads : 1\n*/\n// 2.\n// antipattern:\n// for-in loop without checking hasOwnProperty()\nfor (var i in man) {\n   console.log(i, \":\", man[i]);\n}\n/*\nresult in the console\nhands : 2\nlegs : 2\nheads : 1\nclone: function()\n*/\n</pre>\n<p>Another pattern for using <code>hasOwnProperty()</code> is to call that method off of the Object.prototype, like so:</p>\n<pre name=\"code\" class=\"js\">\nfor (var i in man) {\n   if (Object.prototype.hasOwnProperty.call(man, i)) { // filter\n      console.log(i, \":\", man[i]);\n   }\n}\n</pre>\n<p>The benefit is that you can avoid naming collisions is case the <code>man</code> object has redefined <code>hasOwnProperty</code>. Also to avoid the long property lookups all the way to <code>Object</code>, you can use a local variable to “<em>cache</em>” it:</p>\n<pre name=\"code\" class=\"js\">\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) {\n    if (hasOwn.call(man, i)) { // filter\n        console.log(i, \":\", man[i]);\n    }\n}\n</pre>\n<blockquote><p>\nStrictly speaking, not using <code>hasOwnProperty()</code> is not an error. Depending on the task and the confidence you have in the code, you may skip it and slightly speed up the loops. But when you’re not sure about the contents of the object (and its prototype chain), you’re safer just adding the <code>hasOwnProperty()</code> check.\n</p>\n</blockquote>\n<p>A formatting variation (which doesn’t pass JSLint) skips a curly brace and puts the if on the same line. The benefit is that the loop statement reads more like a complete thought (“for each element that has an own property <code>X</code>, do something with <code>X</code>”). Also there’s less indentation before you get to the main purpose of the loop:</p>\n<pre name=\"code\" class=\"js\">\n// Warning: doesn't pass JSLint\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) if (hasOwn.call(man, i)) { // filter\n    console.log(i, \":\", man[i]);\n}\n</pre>\n<hr />\n<h2>(Not) Augmenting Built-in Prototypes</h2>\n<p>Augmenting the prototype property of constructor functions is a powerful way to add functionality, but it can be too powerful sometimes.</p>\n<p>It’s tempting to augment prototypes of built-in constructors such as <code>Object()</code>, <code>Array()</code>, or <code>Function()</code>, but it can seriously hurt maintainability, because it will make your code less predictable. Other developers using your code will probably expect the built-in JavaScript methods to work consistently and will not expect your additions.</p>\n<p>Additionally, properties you add to the prototype may show up in loops that don’t use <code>hasOwnProperty()</code>, so they can create confusion.</p>\n<p>Therefore it’s best if you don’t augment built-in prototypes. You can make an exception of the rule only when all these conditions are met:</p>\n<ul>\n<li>It’s expected that future ECMAScript versions or JavaScript implementations will implement this functionality as a built-in method consistently. For example, you can add methods described in ECMAScript 5 while waiting for the browsers to catch up. In this case you’re just defining the useful methods ahead of time.</li>\n<li> You check if your custom property or method doesn’t exist already—maybe already implemented somewhere else in the code or already part of the JavaScript engine of one of the browsers you support. </li>\n<li> You clearly document and communicate the change with the team.</li>\n</ul>\n<p>If these three conditions are met, you can proceed with the custom addition to the prototype, following this pattern:</p>\n<pre name=\"code\" class=\"js\">\nif (typeof Object.protoype.myMethod !== \"function\") {\n   Object.protoype.myMethod = function () {\n      // implementation...\n   };\n}\n</pre>\n<hr />\n<h2>switch Pattern </h2>\n<p>You can improve the readability and robustness of your <code>switch</code> statements by following this pattern:</p>\n<pre name=\"code\" class=\"js\">\nvar inspect_me = 0,\n    result = '';\nswitch (inspect_me) {\ncase 0:\n   result = \"zero\";\n   break;\ncase 1:\n   result = \"one\";\n   break;\ndefault:\n   result = \"unknown\";\n}\n</pre>\n<p>The style conventions followed in this simple example are:</p>\n<ul>\n<li>Aligning each <code>case</code> with <code>switch</code> (an exception to the curly braces indentation rule). </li>\n<li>Indenting the code within each case. </li>\n<li>Ending each <code>case</code> with a clear <code>break;</code>.\n<li>Avoiding fall-throughs (when you omit the break intentionally). If you’re absolutely convinced that a fall-through is the best approach, make sure you document such cases, because they might look like errors to the readers of your code. </li>\n<li>Ending the <code>switch</code> with a <code>default:</code> to make sure there’s always a sane result even if none of the cases matched. </li>\n</ul>\n<hr />\n<h2> Avoiding Implied Typecasting </h2>\n<p>JavaScript implicitly typecasts variables when you compare them. That’s why comparisons such as <code>false == 0</code> or <code>\"\" == 0</code> return <code>true</code>.</p>\n<p>To avoid confusion caused by the implied typecasting, always use the <code>===</code> and <code>!==</code> operators that check both the values and the type of the expressions you compare:</p>\n<pre name=\"code\" class=\"js\">\nvar zero = 0;\nif (zero === false) {\n   // not executing because zero is 0, not false\n}\n\n// antipattern\nif (zero == false) {\n   // this block is executed...\n}\n</pre>\n<p>There’s another school of thought that subscribes to the opinion that it’s redundant to use <code>===</code> when <code>==</code> is sufficient. For example, when you use typeof you know it returns a string, so there’s no reason to use strict equality. However, JSLint requires strict equality; it does make the code look consistent and reduces the mental effort when reading code. (“Is this <code>==</code> intentional or an omission?”)</p>\n<hr />\n<h2>\nAvoiding eval()<br />\n</h2>\n<p>If you spot the use of <code>eval()</code> in your code, remember the mantra “eval() is evil.” This function takes an arbitrary string and executes it as JavaScript code. When the code in question is known beforehand (not determined at runtime), there’s no reason to use <code>eval()</code>. If the code is dynamically generated at runtime, there’s often a better way to achieve the goal without <code>eval()</code>. For example, just using square bracket notation to access dynamic properties is better and simpler:</p>\n<pre name=\"code\" class=\"js\">\n// antipattern\nvar property = \"name\";\nalert(eval(\"obj.\" + property));\n\n// preferred\nvar property = \"name\";\nalert(obj[property]);\n</pre>\n<p>Using <code>eval()</code> also has security implications, because you might be executing code (for example coming from the network) that has been tampered with. This is a common antipattern when dealing with a JSON response from an Ajax request. In those cases it’s better to use the browsers’ built-in methods to parse the JSON response to make sure it’s safe and valid. For browsers that don’t support <code>JSON.parse()</code> natively, you can use a library from JSON.org.</p>\n<p>It’s also important to remember that passing strings to <code>setInterval()</code>, <code>setTimeout()</code>, and the <code>Function()</code> constructor is, for the most part, similar to using <code>eval()</code> and therefore should be avoided. Behind the scenes, JavaScript still has to evaluate and execute the string you pass as programming code:</p>\n<pre name=\"code\" class=\"js\">\n// antipatterns\nsetTimeout(\"myFunc()\", 1000);\nsetTimeout(\"myFunc(1, 2, 3)\", 1000);\n\n// preferred\nsetTimeout(myFunc, 1000);\nsetTimeout(function () {\n   myFunc(1, 2, 3);\n}, 1000);\n</pre>\n<p>Using the new <code>Function()</code> constructor is similar to <code>eval()</code> and should be approached with care. It could be a powerful construct but is often misused. If you absolutely must use <code>eval()</code>, you can consider using new <code>Function()</code> instead. There is a small potential benefit because the code evaluated in new <code>Function()</code> will be running in a local function scope, so any variables defined with <code>var</code> in the code being evaluated will not become globals automatically. Another way to prevent automatic globals is to wrap the <code>eval()</code> call into an immediate function.</p>\n<p>Consider the following example. Here only <code>un</code> remains as a global variable polluting the namespace:</p>\n<pre name=\"code\" class=\"js\">\nconsole.log(typeof un);\t// \"undefined\"\nconsole.log(typeof deux); // \"undefined\"\nconsole.log(typeof trois); // \"undefined\"\n\nvar jsstring = \"var un = 1; console.log(un);\";\neval(jsstring); // logs \"1\"\n\njsstring = \"var deux = 2; console.log(deux);\";\nnew Function(jsstring)(); // logs \"2\"\n\njsstring = \"var trois = 3; console.log(trois);\";\n(function () {\n   eval(jsstring);\n}()); // logs \"3\"\n\nconsole.log(typeof un); // number\nconsole.log(typeof deux); // undefined\nconsole.log(typeof trois); // undefined\n</pre>\n<p>Another difference between <code>eval()</code> and the Function constructor is that <code>eval()</code> can interfere with the scope chain whereas <code>Function</code> is much more sandboxed. No matter where you execute <code>Function</code>, it sees only the global scope. So it can do less local variable pollution. In the following example, <code>eval()</code> can access and modify a variable in its outer scope, whereas Function cannot (also note that using Function or new Function is identical):</p>\n<pre name=\"code\" class=\"js\">\n(function () {\n   var local = 1;\n   eval(\"local = 3; console.log(local)\"); // logs 3\n   console.log(local); // logs 3\n}());\n\n(function () {\n   var local = 1;\n   Function(\"console.log(typeof local);\")(); // logs undefined\n}());\n</pre>\n<hr />\n<h2>\nNumber Conversions with parseInt()<br />\n</h2>\n<p>Using <code>parseInt()</code> you can get a numeric value from a string. The function accepts a second radix parameter, which is often omitted but shouldn’t be. The problems occur when the string to parse starts with 0: for example, a part of a date entered into a form field. Strings that start with 0 are treated as octal numbers ( base 8 ) in ECMAScript 3; however, this has changed in ES5. To avoid inconsistency and unexpected results, always specify the radix parameter:</p>\n<pre name=\"code\" class=\"js\">\nvar month = \"06\",\n    year = \"09\";\nmonth = parseInt(month, 10);\nyear = parseInt(year, 10);\n</pre>\n<p>In this example, if you omit the radix parameter like <code>parseInt(year)</code>, the returned value will be <code>0</code>, because “<code>09</code>” assumes octal number (as if you did <code>parseInt( year, 8 )</code>) and <code>09</code> is not a valid digit in base <code>8</code>.</p>\n<p>Alternative ways to convert a string to a number include:</p>\n<pre name=\"code\" class=\"js\">\n+\"08\" // result is 8\nNumber(\"08\") // 8\n</pre>\n<p>These are often faster than <code>parseInt()</code>, because <code>parseInt()</code>, as the name suggests, parses and doesn’t simply convert. But if you’re expecting input such as “08 hello”, <code>parseInt()</code> will return a number, whereas the others will fail with <code>NaN</code>.</p>\n<hr />\n<h2>\nCoding Conventions<br />\n</h2>\n<p>It’s important to establish and follow coding conventions—they make your code consistent, <em>predictable</em>, and much easier to read and understand. A new developer joining the team can read through the conventions and be productive much sooner, understanding the code written by any other team member.</p>\n<p>Many flamewars have been fought in meetings and on mailing lists over specific aspects of certain coding conventions (for example, the code indentation—tabs or spaces?). So if you’re the one suggesting the adoption of conventions in your organization, be prepared to face resistance and hear different but equally strong opinions. Remember that it’s much more important to establish and consistently follow a convention, any convention, than what the exact details of that convention will be.</p>\n<hr />\n<h2>\nIndentation<br />\n</h2>\n<p>Code without indentation is impossible to read. The only thing worse is code with inconsistent indentation, because it looks like it’s following a convention, but it may have confusing surprises along the way. It’s important to standardize the use of indentation.</p>\n<p>Some developers prefer indentation with tabs, because anyone can tweak their editor to display the tabs with the individually preferred number of spaces. Some prefer spaces—usually four. It doesn’t matter as long as everyone in the team follows the same convention. This book, for example, uses four-space indentation, which is also the default in JSLint.</p>\n<p>And what should you indent? The rule is simple—anything within curly braces. This means the bodies of functions, loops (<code>do, while, for, for-in</code>), <code>ifs</code>, <code>switches</code>, and <code>object</code> properties in the <code>object</code> literal notation. The following code shows some examples of using indentation:</p>\n<pre name=\"code\" class=\"js\">\nfunction outer(a, b) {\n    var c = 1,\n        d = 2,\n        inner;\n    if (a > b) {\n        inner = function () {\n            return {\n                r: c - d\n            };\n        };\n    } else {\n        inner = function () {\n            return {\n                r: c + d\n            };\n        };\n    }\n    return inner;\n}\n</pre>\n<hr />\n<h2>\nCurly Braces<br />\n</h2>\n<p>Curly braces should always be used, even in cases when they are optional. Technically, if you have only one statement in an <code>if</code> or a <code>for</code>, curly braces are not required, but you should always use them anyway. It makes the code more consistent and easier to update.</p>\n<p>Imagine you have a for loop with one statement only. You could omit the braces and there will be no syntax error:</p>\n<pre name=\"code\" class=\"js\">\n// bad practice\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n</pre>\n<p>But what if, later on, you add another line in the body of the loop?</p>\n<pre name=\"code\" class=\"js\">\n// bad practice\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n   alert(i + \" is \" + (i % 2 ? \"odd\" : \"even\"));\n</pre>\n<p>The second alert is outside the loop although the indentation may trick you. The best thing to do in the long run is to always use the braces, even for one-line blocks:</p>\n<pre name=\"code\" class=\"js\">\n// better\nfor (var i = 0; i < 10; i += 1) {\n   alert(i);\n}\n</pre>\n<p>Similarly for if conditions:</p>\n<pre name=\"code\" class=\"js\">\n// bad\nif (true)\n   alert(1);\nelse\n   alert(2);\n\n// better\nif (true) {\n   alert(1);\n} else {\n   alert(2);\n}\n</pre>\n<hr />\n<h2>\nOpening Brace Location<br />\n</h2>\n<p>Developers also tend to have preferences about where the opening curly brace should be—on the same line or on the following line?</p>\n<pre name=\"code\" class=\"js\">\nif (true) {\n   alert(\"It's TRUE!\");\n}\n</pre>\n<p>OR:</p>\n<pre name=\"code\" class=\"js\">\nif (true)\n{\n   alert(\"It's TRUE!\");\n}\n</pre>\n<p>In this specific example, it’s a matter of preference, but there are cases in which the program might behave differently depending on where the brace is. This is because of the <code>semicolon insertion mechanism</code>—JavaScript is not picky when you choose not to end your lines properly with a semicolon and adds it for you. This behavior can cause troubles when a function returns an object literal and the opening brace is on the next line:</p>\n<pre name=\"code\" class=\"js\">\n// warning: unexpected return value\nfunction func() {\n   return\n  // unreachable code follows\n   {\n      name : \"Batman\"\n   }\n}\n</pre>\n<p>If you expect this function to return an object with a <code>name</code> property, you’ll be surprised. Because of the implied semicolons, the function returns <code>undefined</code>. The preceding code is equivalent to this one:</p>\n<pre name=\"code\" class=\"js\">\n// warning: unexpected return value\nfunction func() {\n   return undefined;\n  // unreachable code follows\n   {\n      name : \"Batman\"\n   }\n}\n</pre>\n<p>In conclusion, always use curly braces and always put the opening one on the same line as the previous statement:</p>\n<pre name=\"code\" class=\"js\">\nfunction func() {\n   return {\n      name : \"Batman\"\n   };\n}\n</pre>\n<blockquote><p>\nA note on semicolons: Just like with the curly braces, you should always use semicolons, even when they are implied by the JavaScript parsers. This not only promotes discipline and a more rigorous approach to the code but also helps resolve ambiguities, as the previous example showed.</p>\n</blockquote>\n<hr />\n<h2>\nWhite Space<br />\n</h2>\n<p>The use of white space can also contribute to improved readability and consistency of the code. In written English sentences you use intervals after commas and periods. In JavaScript you follow the same logic and add intervals after list-like expressions (equivalent to commas) and end-of-statements (equivalent to completing a “thought”).</p>\n<p>Good places to use a white space include: </p>\n<ul>\n<li>After the semicolons that separate the parts of a for loop: for example, <code>for (var i<br />\n= 0; i < 10; i += 1) {...}</code> </li>\n<li> Initializing multiple variables (i and max) in a <code>for</code> loop: <code>for (var i = 0, max = 10; i < max; i += 1) {...}</code> </li>\n<li> After the commas that delimit array items: <code>var a = [1, 2, 3];</code> </li>\n<li>After commas in object properties and after colons that divide property names and<br />\ntheir values: <code>var o = {a: 1, b: 2};</code> </li>\n<li> Delimiting function arguments: <code>myFunc(a, b, c)</code> </li>\n<li> Before the curly braces in function declarations: <code>function myFunc() {}</code> </li>\n<li>After <code>function</code> in anonymous function expressions: <code>var myFunc = function () {};</code> </li>\n</ul>\n<p>Another good use for white space is to separate all operators and their operands with spaces, which basically means use a space before and after <code>+, -, *, =, <, >, <=, >=, ===, !==, &#038;&#038;, ||, +=,</code> and so on:</p>\n<pre name=\"code\" class=\"js\">\n// generous and consistent spacing\n// makes the code easier to read\n// allowing it to \"breathe\"\nvar d = 0,\n    a = b + 1;\nif (a &#038;&#038; b &#038;&#038; c) {\n    d = a % c;\n    a += d;\n}\n\n// antipattern\n// missing or inconsistent spaces\n// make the code confusing\nvar d = 0,\n    a = b + 1;\nif (a &#038;&#038; b &#038;&#038; c) {\n    d = a % c;\n    a += d;\n}\n</pre>\n<p>And a final note about white space—curly braces spacing. It’s good to use a space: </p>\n<ul>\n<li>Before opening curly braces (<code>{</code>) in functions, <code>if-else</code> cases, loops, and object literals </li>\n<li>Between the closing curly brace (<code>}</code>) and <code>else</code> or <code>while</code>\n</li>\n</ul>\n<p> A case against liberal use of white space might be that it could increase the file size, but<br />\nminification takes care of this issue.</p>\n<blockquote>\n<p>\nAn often-overlooked aspect of code readability is the use of vertical white space. You can use blank lines to separate units of code, just as paragraphs are used in literature to separate ideas.\n</p>\n</blockquote>\n<hr />\n<h2>\nNaming Conventions<br />\n</h2>\n<p>Another way to make your code more predictable and maintainable is to adopt naming conventions. That means choosing names for your variables and functions in a consistent manner.</p>\n<p>Below are some naming convention suggestions that you can adopt as-is or tweak to your liking. Again, having a convention and following it consistently is much more important than what that convention actually is.</p>\n<hr />\n<h2>\nCapitalizing Constructors<br />\n</h2>\n<p>JavaScript doesn’t have classes but has constructor functions invoked with <code>new</code>:</p>\n<pre name=\"code\" class=\"js\">\nvar adam = new Person();\n</pre>\n<p>Because constructors are still just functions, it helps if you can tell, just by looking at a function name, whether it was supposed to behave as a constructor or as a normal function.</p>\n<p>Naming constructors with a capital first letter provides that hint. Using lowercase for functions and methods indicates that they are not supposed to be called with <code>new</code>:</p>\n<pre name=\"code\" class=\"js\">\nfunction MyConstructor() {...}\nfunction myFunction() {...}\n</pre>\n<hr />\n<h2>\nSeparating Words<br />\n</h2>\n<p>When you have multiple words in a variable or a function name, it’s a good idea to follow a convention as to how the words will be separated. A common convention is to use the so-called <em>camel case</em>. Following the camel case convention, you type the words in lowercase, only capitalizing the first letter in each word.</p>\n<p>For your constructors, you can use <em>upper camel case</em>, as in <code>MyConstructor()</code>, and for function and method names, you can use <em>lower camel case</em>, as in <code>myFunction()</code>, <code>calculateArea()</code> and <code>getFirstName()</code>.</p>\n<p>And what about variables that are not functions? Developers commonly use lower camel case for variable names, but another good idea is to use all lowercase words delimited by an underscore: for example, <code>first_name</code>, <code>favorite_bands</code>, and <code>old_company_name</code>. This notation helps you visually distinguish between functions and all other identifiers—primitives and objects.</p>\n<p>ECMAScript uses camel case for both methods and properties, although the multiword property names are rare (<code>lastIndex</code> and <code>ignoreCase</code> properties of regular expression objects).</p>\n<hr />\n<h2>\nOther Naming Patterns<br />\n</h2>\n<p>Sometimes developers use a naming convention to make up or substitute language features.</p>\n<p>For example, there is no way to define constants in JavaScript (although there are some built-in such as <code>Number.MAX_VALUE</code>), so developers have adopted the convention of using all-caps for naming variables that shouldn’t change values during the life of the program, like:</p>\n<pre name=\"code\" class=\"js\">\n// precious constants, please don't touch\nvar PI = 3.14,\n    MAX_WIDTH = 800;\n</pre>\n<p>There’s another convention that competes for the use of all caps: using capital letters for names of global variables. Naming globals with all caps can reinforce the practice of minimizing their number and can make them easily distinguishable.</p>\n<p>Another case of using a convention to mimic functionality is the private members convention. Although you can implement true privacy in JavaScript, sometimes developers find it easier to just use an underscore prefix to denote a private method or property. Consider the following example:</p>\n<pre name=\"code\" class=\"js\">\nvar person = {\n    getName: function () {\n        return this._getFirst() + ' ' + this._getLast();\n    },\n\n    _getFirst: function () {\n        // ...\n    },\n    _getLast: function () {\n        // ...\n    }\n};\n</pre>\n<p>In this example <code>getName()</code> is meant to be a public method, part of the stable API, whereas <code>_getFirst()</code> and <code>_getLast()</code> are meant to be private. They are still normal public methods, but using the underscore prefix warns the users of the person object that these methods are not guaranteed to work in the next release and shouldn’t be used directly. Note that JSLint will complain about the underscore prefixes, unless you set the option nomen: <code>false</code>.</p>\n<p>Following are some varieties to the <code>_private</code> convention: </p>\n<ul>\n<li>Using a trailing underscore to mean private, as in <code>name_</code> and <code>getElements_()</code></li>\n<li>\n<li>Using one underscore prefix for <code>_protected</code> properties and two for <code>__private</code> properties </li>\n<li>In Firefox some internal properties not technically part of the language are available, and they are named with a two underscores prefix and a two underscore suffix, such as <code>__proto__</code> and<code> __parent__</code>\n</li>\n</ul>\n<hr />\n<h2>\nWriting Comments<br />\n</h2>\n<p>You have to comment your code, even if it’s unlikely that someone other than you will ever touch it. Often when you’re deep into a problem you think it’s obvious what the code does, but when you come back to the code after a week, you have a hard time remembering how it worked exactly.</p>\n<p>You shouldn’t go overboard commenting the obvious: every single variable or every single line. But you usually need to document all functions, their arguments and return values, and also any interesting or unusual algorithm or technique. Think of the comments as hints to the future readers of the code; the readers need to understand what your code does without reading much more than just the comments and the function and property names. When you have, for example, five or six lines of code performing a specific task, the reader can skip the code details if you provide a one-line description describing the <em>purpose</em> of the code and why it’s there. There’s no hard and fast rule or ratio of comments-to-code; some pieces of code (think regular expressions) may actually require more comments than code.</p>\n<blockquote>\n<p>\nThe most important habit, yet hardest to follow, is to keep the comments up to date, because outdated comments can mislead and be much worse than no comments at all. </p>\n</blockquote>\n<hr />\n<h2>About the Author </h2>\n<p>\nStoyan Stefanov is a Yahoo! web developer and an <a href=\"http://www.amazon.com/Object-Oriented-JavaScript-Stoyan-Stefanov/dp/1847194141/?tag=w3clubs-20\">author</a>, contributor, and tech reviewer of various O'Reilly books.  He speaks regularly about web development topics at conferences and on his blog at <a href=\"http://www.phpied.com\">www.phpied.com</a>. Stoyan is the creator of the smush.it image optimization tool, YUI contributor and architect of Yahoo's performance optimization tool YSlow 2.0.\n</p>\n<hr />\n<h2> <a href=\"http://amzn.to/93szK7\">Buy the Book</a> </h2>\n<div class=\"tutorial_image\">\n<a href=\"http://amzn.to/93szK7\"><br />\n    <img src=\"http://d2o0t5hpnwv4c1.cloudfront.net/820_javascript_patterns/book_javascript_patterns.jpg\" alt=\"JavaScript Patterns\" /><br />\n</a>\n</div>\n<p><strong>This article is an excerpt from \"<a href=\"http://amzn.to/93szK7\">JavaScript Patterns</a>,\" by <a href=\"http://oreilly.com/\">O'Reilly Media</a>. </strong></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=MaE_EDsJRuo:S3Vtwri5hlQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=MaE_EDsJRuo:S3Vtwri5hlQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=MaE_EDsJRuo:S3Vtwri5hlQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=MaE_EDsJRuo:S3Vtwri5hlQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=MaE_EDsJRuo:S3Vtwri5hlQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=MaE_EDsJRuo:S3Vtwri5hlQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=MaE_EDsJRuo:S3Vtwri5hlQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=MaE_EDsJRuo:S3Vtwri5hlQ:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/MaE_EDsJRuo\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/feed/","origLink":"http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/"},{"title":"Welcome Aboard Webdesigntuts+!","link":"http://feedproxy.google.com/~r/nettuts/~3/aNT9jsLDsJw/","comments":["http://net.tutsplus.com/articles/news/welcome-aboard-webdesigntuts/#comments","51"],"pubDate":"Mon, 11 Oct 2010 23:35:19 +0000","creator":"Skellie","category":"News","guid":{"isPermaLink":"false","content":"http://net.tutsplus.com/?p=15140"},"description":"<p><a href=\"http://feedads.g.doubleclick.net/~a/GABlIDzeJjO7UCjhUo3kqd6OSGs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GABlIDzeJjO7UCjhUo3kqd6OSGs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~a/GABlIDzeJjO7UCjhUo3kqd6OSGs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GABlIDzeJjO7UCjhUo3kqd6OSGs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Today we&#8217;re extremely proud to launch <a href=\"http://webdesign.tutsplus.com\">Webdesigntuts+</a>, the 10th member of the <a href=\"http://tutsplus.com\">Tuts+</a> family. Though we have a long history of publishing excellent web design content, <a href=\"http://webdesign.tutsplus.com\">Webdesigntuts+</a> is our first site completely dedicated to this topic &#8211; one which we&#8217;re very passionate about.<span id=\"more-15140\"></span></p>\n<p>If you&#8217;re tired of the endless round-ups and lists circulating on web design blogs, we hope Webdesigntuts+ will offer a refreshing change. We&#8217;ll be publishing <a href=\"http://webdesign.tutsplus.com/index.php/design-a-warm-cheerful-website-interface-in-adobe-photoshop/\">in-depth tutorials</a> on designing complete interfaces and UI elements, coupled with <a href=\"http://webdesign.tutsplus.com/index.php/planning-ahead-examining-ways-to-improve-your-workflow/\">in-depth articles</a> on web design theory, workflow and strategy.</p>\n<p>Better yet, we&#8217;ve recruited Brandon Jones (epicera), an industry veteran and <a href=\"http://themeforest.net\">ThemeForest</a> top-selling author, to helm the site and make sure it&#8217;s the best web design blog around!</p>\n<p>Coupled with Nettuts+, we&#8217;ll be serving up a one-two punch of code and design education.</p>\n<hr />\n<h2><span>Bio:</span> About the Editor</h2>\n<div class=\"tutorial_image left\" style=\"margin: 0 20px 20px 0\"><img src=\"http://webdesigntutsplus.s3.amazonaws.com/000_launch/brandon.jpg\"></div>\n<p>From sunny Southern California, Brandon Jones has been designing, drawing, photographing, and coding the world around him for the past several years. Not content to pick one media and stick with it, Brandon has developed a broad range of talents which have allowed him to work on projects ranging from grungy digital art kits to Fortune 500 software prototyping.</p>\n<p>With a strong background in graphic design, digital illustration, and user interface design (as well as a smattering of front-end programming languages), Brandon has had the opportunity to work with a variety of award winning studios through his young career. He also has a background in communications and marketing. He has attended a number of colleges in Southern California, but counts himself as a largely self-taught and self-motivated designer with a desire to play a larger role in the design community. He is currently a student in the Cal Poly Pomona Design Department where he is finishing a new degree in Graphic Design &#038; Art History.</p>\n<p>Brandon Jones is currently the <a href=\"http://themeforest.net/author/top_authors\">second highest-selling author</a> on <a href=\"http://themeforest.net\">ThemeForest</a>, Envato&#8217;s marketplace for buying and selling website themes.</p>\n<hr />\n<h2><span>Wishlist:</span> What Do You Want to See?</h2>\n<p>Is there a topic you&#8217;re dying to see covered well? A designer we should ask to write for us? Is there something you definitely <em>don&#8217;t</em> want to see on Webdesigntuts+? Leave a comment and let us know your requests. Every suggestion will be read by the Webdesigntuts+ Editor.</p>\n<h4><a href=\"http://webdesign.tutsplus.com\">Visit Webdesigntuts+</a></h4><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=aNT9jsLDsJw:Mlnqza3CfJM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=aNT9jsLDsJw:Mlnqza3CfJM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=aNT9jsLDsJw:Mlnqza3CfJM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=aNT9jsLDsJw:Mlnqza3CfJM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=aNT9jsLDsJw:Mlnqza3CfJM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=aNT9jsLDsJw:Mlnqza3CfJM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?i=aNT9jsLDsJw:Mlnqza3CfJM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=aNT9jsLDsJw:Mlnqza3CfJM:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/nettuts/~4/aNT9jsLDsJw\" height=\"1\" width=\"1\"/>","commentRss":"http://net.tutsplus.com/articles/news/welcome-aboard-webdesigntuts/feed/","origLink":"http://net.tutsplus.com/articles/news/welcome-aboard-webdesigntuts/"}]}}}